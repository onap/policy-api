<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Policy API Performance" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="API_HOST" elementType="Argument">
            <stringProp name="Argument.name">API_HOST</stringProp>
            <stringProp name="Argument.value">10.15.100.214</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_PORT" elementType="Argument">
            <stringProp name="Argument.name">API_PORT</stringProp>
            <stringProp name="Argument.value">31105</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://${API_HOST}:${API_PORT}/</stringProp>
            <stringProp name="Authorization.username">policyadmin</stringProp>
            <stringProp name="Authorization.password">zb!XztG34</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Healthcheck" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/healthcheck</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.code == 200;
    assert res.name == &quot;Policy API&quot;;
    assert res.healthy==true;
    assert res.message==&quot;alive&quot;;
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Statistics" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/statistics</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.code == 200;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Preloaded Policy Types" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 38;
    assert res.node_types instanceof Map;
    assert res.data_types instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API Test Flow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">20</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">9000</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Monitoring" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;policy_types&quot;: {&#xd;
        &quot;onap.policies.Monitoring&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
            &quot;version&quot;: &quot;6.0.0&quot;,&#xd;
            &quot;description&quot;: &quot;a base policy type for all policies that govern monitoring provisioning&quot;&#xd;
        },&#xd;
        &quot;onap.policies.monitoring.cdap.tca.hi.lo.app&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;onap.policies.Monitoring&quot;,&#xd;
            &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;tca_policy&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.datatypes.monitoring.tca_policy&quot;,&#xd;
                    &quot;description&quot;: &quot;TCA Policy JSON&quot;,&#xd;
                    &quot;required&quot;: true&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    },&#xd;
    &quot;data_types&quot;: {&#xd;
        &quot;onap.datatypes.monitoring.metricsPerEventName&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;controlLoopSchemaType&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Specifies Control Loop Schema Type for the event Name e.g. VNF, VM&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;VM&quot;,&#xd;
                                &quot;VNF&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;eventName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Event name to which thresholds need to be applied&quot;&#xd;
                },&#xd;
                &quot;policyName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope Name&quot;&#xd;
                },&#xd;
                &quot;policyScope&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope&quot;&#xd;
                },&#xd;
                &quot;policyVersion&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope Version&quot;&#xd;
                },&#xd;
                &quot;thresholds&quot;: {&#xd;
                    &quot;type&quot;: &quot;list&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Thresholds associated with eventName&quot;,&#xd;
                    &quot;entry_schema&quot;: {&#xd;
                        &quot;type&quot;: &quot;onap.datatypes.monitoring.thresholds&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;onap.datatypes.monitoring.tca_policy&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;domain&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Domain name to which TCA needs to be applied&quot;,&#xd;
                    &quot;default&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;equal&quot;: &quot;measurementsForVfScaling&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;metricsPerEventName&quot;: {&#xd;
                    &quot;type&quot;: &quot;list&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Contains eventName and threshold details that need to be applied to given eventName&quot;,&#xd;
                    &quot;entry_schema&quot;: {&#xd;
                        &quot;type&quot;: &quot;onap.datatypes.monitoring.metricsPerEventName&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;onap.datatypes.monitoring.thresholds&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;closedLoopControlName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Closed Loop Control Name associated with the threshold&quot;&#xd;
                },&#xd;
                &quot;closedLoopEventStatus&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Closed Loop Event Status of the threshold&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;ONSET&quot;,&#xd;
                                &quot;ABATED&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;direction&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Direction of the threshold&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;LESS&quot;,&#xd;
                                &quot;LESS_OR_EQUAL&quot;,&#xd;
                                &quot;GREATER&quot;,&#xd;
                                &quot;GREATER_OR_EQUAL&quot;,&#xd;
                                &quot;EQUAL&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;fieldPath&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Json field Path as per CEF message which needs to be analyzed for TCA&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedOctetsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedUnicastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedMulticastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedBroadcastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedDiscardedPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedErrorPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedOctetsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedUnicastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedMulticastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedBroadcastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedDiscardedPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedErrorPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedTotalPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedOctetsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedUnicastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedMulticastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedBroadcastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedDiscardedPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedErrorPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedTotalPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedOctetsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedUnicastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedMulticastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedBroadcastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedDiscardedPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedErrorPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuIdle&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageInterrupt&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageNice&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSoftIrq&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSteal&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSystem&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuWait&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].percentUsage&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.meanRequestLatency&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryBuffered&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryCached&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryConfigured&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryFree&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryUsed&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;severity&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Threshold Event Severity&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;CRITICAL&quot;,&#xd;
                                &quot;MAJOR&quot;,&#xd;
                                &quot;MINOR&quot;,&#xd;
                                &quot;WARNING&quot;,&#xd;
                                &quot;NORMAL&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;thresholdValue&quot;: {&#xd;
                    &quot;type&quot;: &quot;integer&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Threshold value for the field Path inside CEF message&quot;&#xd;
                },&#xd;
                &quot;version&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Version number associated with the threshold&quot;&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Monitoring V7" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;policy_types&quot;: {&#xd;
        &quot;onap.policies.Monitoring&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
            &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
            &quot;description&quot;: &quot;a base policy type for all policies that govern monitoring provisioning&quot;&#xd;
        },&#xd;
        &quot;onap.policies.monitoring.cdap.tca.hi.lo.app&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;onap.policies.Monitoring&quot;,&#xd;
            &quot;version&quot;: &quot;7.0.${__threadNum}&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;tca_policy&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.datatypes.monitoring.tca_policy&quot;,&#xd;
                    &quot;description&quot;: &quot;TCA Policy JSON&quot;,&#xd;
                    &quot;required&quot;: true&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    },&#xd;
    &quot;data_types&quot;: {&#xd;
        &quot;onap.datatypes.monitoring.metricsPerEventName&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;controlLoopSchemaType&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Specifies Control Loop Schema Type for the event Name e.g. VNF, VM&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;VM&quot;,&#xd;
                                &quot;VNF&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;eventName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Event name to which thresholds need to be applied&quot;&#xd;
                },&#xd;
                &quot;policyName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope Name&quot;&#xd;
                },&#xd;
                &quot;policyScope&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope&quot;&#xd;
                },&#xd;
                &quot;policyVersion&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope Version&quot;&#xd;
                },&#xd;
                &quot;thresholds&quot;: {&#xd;
                    &quot;type&quot;: &quot;list&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Thresholds associated with eventName&quot;,&#xd;
                    &quot;entry_schema&quot;: {&#xd;
                        &quot;type&quot;: &quot;onap.datatypes.monitoring.thresholds&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;onap.datatypes.monitoring.tca_policy&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;domain&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Domain name to which TCA needs to be applied&quot;,&#xd;
                    &quot;default&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;equal&quot;: &quot;measurementsForVfScaling&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;metricsPerEventName&quot;: {&#xd;
                    &quot;type&quot;: &quot;list&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Contains eventName and threshold details that need to be applied to given eventName&quot;,&#xd;
                    &quot;entry_schema&quot;: {&#xd;
                        &quot;type&quot;: &quot;onap.datatypes.monitoring.metricsPerEventName&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;onap.datatypes.monitoring.thresholds&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;closedLoopControlName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Closed Loop Control Name associated with the threshold&quot;&#xd;
                },&#xd;
                &quot;closedLoopEventStatus&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Closed Loop Event Status of the threshold&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;ONSET&quot;,&#xd;
                                &quot;ABATED&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;direction&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Direction of the threshold&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;LESS&quot;,&#xd;
                                &quot;LESS_OR_EQUAL&quot;,&#xd;
                                &quot;GREATER&quot;,&#xd;
                                &quot;GREATER_OR_EQUAL&quot;,&#xd;
                                &quot;EQUAL&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;fieldPath&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Json field Path as per CEF message which needs to be analyzed for TCA&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedOctetsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedUnicastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedMulticastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedBroadcastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedDiscardedPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedErrorPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedOctetsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedUnicastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedMulticastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedBroadcastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedDiscardedPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedErrorPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedTotalPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedOctetsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedUnicastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedMulticastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedBroadcastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedDiscardedPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedErrorPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedTotalPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedOctetsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedUnicastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedMulticastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedBroadcastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedDiscardedPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedErrorPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuIdle&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageInterrupt&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageNice&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSoftIrq&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSteal&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSystem&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuWait&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].percentUsage&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.meanRequestLatency&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryBuffered&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryCached&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryConfigured&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryFree&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryUsed&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;severity&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Threshold Event Severity&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;CRITICAL&quot;,&#xd;
                                &quot;MAJOR&quot;,&#xd;
                                &quot;MINOR&quot;,&#xd;
                                &quot;WARNING&quot;,&#xd;
                                &quot;NORMAL&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;thresholdValue&quot;: {&#xd;
                    &quot;type&quot;: &quot;integer&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Threshold value for the field Path inside CEF message&quot;&#xd;
                },&#xd;
                &quot;version&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Version number associated with the threshold&quot;&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Optimization" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.optimization.resource.AffinityPolicy&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.optimization.Resource&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;applicableResources&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;string&quot;,&#xd;
                  &quot;constraints&quot;: [&#xd;
                     {&#xd;
                        &quot;valid_values&quot;: [&#xd;
                           &quot;any&quot;,&#xd;
                           &quot;all&quot;&#xd;
                        ]&#xd;
                     }&#xd;
                  ]&#xd;
               }&#xd;
            },&#xd;
            &quot;affinityProperties&quot;: {&#xd;
               &quot;type&quot;: &quot;policy.data.affinityProperties_properties&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;data_types&quot;: {&#xd;
      &quot;policy.data.affinityProperties_properties&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.nodes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;qualifier&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;constraints&quot;: [&#xd;
                  {&#xd;
                     &quot;valid_values&quot;: [&#xd;
                        &quot;same&quot;,&#xd;
                        &quot;different&quot;&#xd;
                     ]&#xd;
                  }&#xd;
               ]&#xd;
            },&#xd;
            &quot;category&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 1;
    assert res.policy_types.values()[0] instanceof Map;
 //   assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Guard" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.controlloop.guard.common.Blacklist&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.controlloop.guard.Common&quot;,&#xd;
         &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;description&quot;: &quot;Supports blacklist of entity id&apos;s from performing control loop actions on.&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;blacklist&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;description&quot;: &quot;List of entity id&apos;s not allowed to have control loop operations on.&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;string&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 1;
    assert res.policy_types.values()[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Native APEX" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.Native&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
         &quot;description&quot;: &quot;a base policy type for all native PDP policies&quot;,&#xd;
         &quot;version&quot;: &quot;1.0.0&quot;&#xd;
      },&#xd;
      &quot;onap.policies.native.Apex&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.Native&quot;,&#xd;
         &quot;description&quot;: &quot;a policy type for native apex policies&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;engine_service&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.EngineService&quot;,&#xd;
               &quot;description&quot;: &quot;APEX Engine Service Parameters&quot;&#xd;
            },&#xd;
            &quot;inputs&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;description&quot;: &quot;Inputs for handling events coming into the APEX engine&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.native.apex.EventHandler&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;outputs&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;description&quot;: &quot;Outputs for handling events going out of the APEX engine&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.native.apex.EventHandler&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;environment&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;description&quot;: &quot;Envioronmental parameters for the APEX engine&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.native.apex.Environment&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;data_types&quot;: {&#xd;
      &quot;onap.datatypes.native.apex.EngineService&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the engine name&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: &quot;ApexEngineService&quot;&#xd;
            },&#xd;
            &quot;version&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the engine version in double dotted format&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: &quot;1.0.0&quot;&#xd;
            },&#xd;
            &quot;id&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the engine id&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;instance_count&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the number of engine threads that should be run&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;deployment_port&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the port to connect to for engine administration&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: 1&#xd;
            },&#xd;
            &quot;policy_model_file_name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The name of the file from which to read the APEX policy model&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;policy_type_impl&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The policy type implementation from which to read the APEX policy model&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;periodic_event_period&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The time interval in milliseconds for the periodic scanning event, 0 means don&apos;t scan&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;engine&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.engineservice.Engine&quot;,&#xd;
               &quot;description&quot;: &quot;The parameters for all engines in the APEX engine service&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.EventHandler&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event handler name, if not specified this is set to the key name&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;carrier_technology&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.CarrierTechnology&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the carrier technology of the event handler (such as REST/Web Socket/Kafka)&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;event_protocol&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.EventProtocol&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event protocol of events for the event handler (such as Yaml/JSON/XML/POJO)&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;event_name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event name for events on this event handler, if not specified, the event name is read from or written to the event being received or sent&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;event_name_filter&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies a filter as a regular expression, events that do not match the filter are dropped, the default is to let all events through&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;synchronous_mode&quot;: {&#xd;
               &quot;type&quot;: &quot;boolean&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event handler is syncronous (receive event and send response)&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: false&#xd;
            },&#xd;
            &quot;synchronous_peer&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The peer event handler (output for input or input for output) of this event handler in synchronous mode, this parameter is mandatory if the event handler is in synchronous mode&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;synchronous_timeout&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;The timeout in milliseconds for responses to be issued by APEX torequests, this parameter is mandatory if the event handler is in synchronous mode&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;requestor_mode&quot;: {&#xd;
               &quot;type&quot;: &quot;boolean&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event handler is in requestor mode (send event and wait for response mode)&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: false&#xd;
            },&#xd;
            &quot;requestor_peer&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The peer event handler (output for input or input for output) of this event handler in requestor mode, this parameter is mandatory if the event handler is in requestor mode&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;requestor_timeout&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;The timeout in milliseconds for wait for responses to requests, this parameter is mandatory if the event handler is in requestor mode&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.CarrierTechnology&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;label&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The label (name) of the carrier technology (such as REST, Kafka, WebSocket)&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;plugin_parameter_class_name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The class name of the class that overrides default handling of event input or output for this carrier technology, defaults to the supplied input or output class&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.EventProtocol&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;label&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The label (name) of the event protocol (such as Yaml, JSON, XML, or POJO)&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;event_protocol_plugin_class&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The class name of the class that overrides default handling of the event protocol for this carrier technology, defaults to the supplied event protocol class&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.Environment&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The name of the environment variable&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;value&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The value of the environment variable&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.engineservice.Engine&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;context&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.engineservice.engine.Context&quot;,&#xd;
               &quot;description&quot;: &quot;The properties for handling context in APEX engines, defaults to using Java maps for context&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;executors&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;description&quot;: &quot;The plugins for policy executors used in engines such as javascript, MVEL, Jython&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;description&quot;: &quot;The plugin class path for this policy executor&quot;,&#xd;
                  &quot;type&quot;: &quot;string&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.engineservice.engine.Context&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;distributor&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.Plugin&quot;,&#xd;
               &quot;description&quot;: &quot;The plugin to be used for distributing context between APEX PDPs at runtime&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;schemas&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;description&quot;: &quot;The plugins for context schemas available in APEX PDPs such as Java and Avro&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.native.apex.Plugin&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;locking&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.Plugin&quot;,&#xd;
               &quot;description&quot;: &quot;The plugin to be used for locking context in and between APEX PDPs at runtime&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;persistence&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.Plugin&quot;,&#xd;
               &quot;description&quot;: &quot;The plugin to be used for persisting context for APEX PDPs at runtime&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.Plugin&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The name of the executor such as Javascript, Jython or MVEL&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;plugin_class_name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The class path of the plugin class for this executor&quot;&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Native Drools" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.Native&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
         &quot;description&quot;: &quot;a base policy type for all native PDP policies&quot;,&#xd;
         &quot;version&quot;: &quot;1.0.0&quot;&#xd;
      },&#xd;
      &quot;onap.policies.native.Drools&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.Native&quot;,&#xd;
         &quot;description&quot;: &quot;a base policy type for all native PDP policies&quot;,&#xd;
         &quot;version&quot;: &quot;1.0.0&quot;&#xd;
      },&#xd;
      &quot;onap.policies.native.drools.Controller&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.native.Drools&quot;,&#xd;
         &quot;description&quot;: &quot;a policy type for a drools controller configuration&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;controllerName&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the drools controller name&quot;&#xd;
            },&#xd;
            &quot;sourceTopics&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;source topics and applicable events&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.dmaap.topic&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;sinkTopics&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;sink topics and applicable events&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.dmaap.topic&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;customConfig&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;any use case specific configurations relevant to the drools controller&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;string&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.policies.native.drools.Artifact&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.native.Drools&quot;,&#xd;
         &quot;description&quot;: &quot;a policy type for native drools artifact policies&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;rulesArtifact&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.rules_artifact&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the GAV information of the maven artifact&quot;&#xd;
            },&#xd;
            &quot;controller&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.drools.controller.relation&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the drools controller to which the current native policy is assigned&quot;&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;data_types&quot;: {&#xd;
      &quot;onap.datatypes.dmaap.topic&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;topicName&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the dmaap topic name&quot;&#xd;
            },&#xd;
            &quot;events&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;events used by this topic&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.dmaap.events&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.dmaap.events&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;eventClass&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the event canonical class for serialization&quot;&#xd;
            },&#xd;
            &quot;eventFilter&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;the JSONPath based condition to filter out the events to serialize&quot;&#xd;
            },&#xd;
            &quot;customSerialization&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.dmaap.custom_serialization&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;overrides the default serialization/deserialization mechanisms with custom ones&quot;&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.dmaap.custom_serialization&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;customSerializerClass&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the class that contains the JSON parser serializer/deserializer.&quot;&#xd;
            },&#xd;
            &quot;jsonParser&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;static field in customSerialized class with the json parser (currently only gson supported)&quot;&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.rules_artifact&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;groupId&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the groupId of the maven artifact&quot;&#xd;
            },&#xd;
            &quot;artifactId&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the artifactId of the maven artifact&quot;&#xd;
            },&#xd;
            &quot;version&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the version of the maven artifact&quot;&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.drools.controller.relation&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the name of drools controller policy&quot;&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 4;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
    assert res.policy_types.values()[2] instanceof Map;
    assert res.policy_types.values()[3] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Native XACML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.Native&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
         &quot;description&quot;: &quot;a base policy type for all native PDP policies&quot;,&#xd;
         &quot;version&quot;: &quot;1.0.0&quot;&#xd;
      },&#xd;
      &quot;onap.policies.native.Xacml&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.Native&quot;,&#xd;
         &quot;description&quot;: &quot;a policy type for native xacml policies&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;policy&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;The XML XACML 3.0 PolicySet or Policy&quot;,&#xd;
               &quot;metadata&quot;: {&#xd;
                  &quot;encoding&quot;: &quot;Base64&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Policy Types" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 38;

    def n = 33;
    for (i=0; i&lt;n; i++) {
        assert res.policy_types.values()[i] instanceof Map;
    }
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Versions of TCA Policy Type" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This is not working in Frankfurt and hence disabled.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() &gt; 0 &amp;&amp; res.policy_types.size() &lt; 10;

    for (i=0; i&lt;res.policy_types.size(); i++) {
        assert res.policy_types.values()[i] instanceof Map;
    }
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Monitoring" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;

    assert res.policy_types.get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Optimization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 3;

    assert res.policy_types.get(&apos;onap.policies.optimization.resource.AffinityPolicy&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.optimization.resource.AffinityPolicy&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Guard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;

    assert res.policy_types.get(&apos;onap.policies.controlloop.guard.common.Blacklist&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.controlloop.guard.common.Blacklist&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Native APEX" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Apex/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;

    assert res.policy_types.get(&apos;onap.policies.native.Apex&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.Apex&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Native Drools" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Controller/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 3;

    assert res.policy_types.get(&apos;onap.policies.native.drools.Controller&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.drools.Controller&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Native XACML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Xacml/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;

    assert res.policy_types.get(&apos;onap.policies.native.Xacml&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.Xacml&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Latest Monitoring Policy Type" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/latest</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() &gt; 0 &amp;&amp; res.policy_types.size() &lt; 10;

    assert res.policy_types.get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;).version ==~ /7.0.\d+/;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Node Template" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;node_types&quot;: {&#xd;
        &quot;org.onap.nodetypes.policy.MetadataSet&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.nodetypes.Root&quot;,&#xd;
            &quot;version&quot;: &quot;6.0.${__threadNum}&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;node_templates&quot;: {&#xd;
            &quot;apex.metadata.pnf&quot;: {&#xd;
                &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                &quot;type&quot;: &quot;org.onap.nodetypes.policy.MetadataSet&quot;,&#xd;
                &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                &quot;description&quot;: &quot;Metadata set for apex pnf Policy&quot;,&#xd;
                &quot;metadata&quot;: {&#xd;
                    &quot;apexPolicyModel&quot;: {&#xd;
                        &quot;key&quot;: {&#xd;
                            &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop&quot;,&#xd;
                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                        },&#xd;
                        &quot;keyInformation&quot;: {&#xd;
                            &quot;key&quot;: {&#xd;
                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_KeyInfo&quot;,&#xd;
                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                            },&#xd;
                            &quot;keyInfoMap&quot;: {&#xd;
                                &quot;entry&quot;: [&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleBooleanType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleBooleanType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;7218fb2f-59e3-321d-9ae1-bc97b19eb4ae&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleBooleanType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;c8a29e27-0a15-354a-84f9-4c7f207e5c81&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_AAIFailureResponseEvent:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;5e843cee-0180-39b9-8989-180b2ffe11c0&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_AAIFailureResponseHandlerPolicy:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAIRequestErrorType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAIRequestErrorType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;90291c92-9b27-3cd9-8720-db572419c048&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_AAIRequestErrorType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAIRequestEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAIRequestEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;7b7e6751-4e0b-389d-98c0-5567bbc0294c&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_AAIRequestEvent:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;63d5680c-14ef-3505-8d34-ebb646bba07b&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_AAISuccessResponseEvent:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;a84ca97d-6e94-39a2-91f9-59a6c9aa435e&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_AAISuccessResponseHandlerPolicy:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;0e2ee622-7fd3-3e49-82e2-539c4f5e9624&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSActionIdentifiersType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;e84f8682-ea33-3ad0-8626-8bc4634581fc&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifyFailureResponseEvent:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;a252f835-2479-38ef-9ef4-20af62725752&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;cfc46ea9-b8c1-38dd-ac9c-304c916daf34&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifyFailureResponseTask:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;1e7095d6-a455-3f89-acae-486e35d7e311&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifyRequestEvent:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestPayloadType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestPayloadType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;d22ea83b-695d-3da9-b9f5-41f16ca433bf&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifyRequestPayloadType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyResponsePayloadType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyResponsePayloadType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;e9fe2e40-1f0d-30dd-8b9e-885695878693&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifyResponsePayloadType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;5e04fa76-0a17-38a9-8524-23b2d1a23fa5&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifySuccessResponseEvent:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;15866380-40f5-3f8e-87d9-13747a36d352&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;2c3d76ce-dd42-32ac-a397-ab418534e1cf&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSConfigModifySuccessResponseTask:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseCommonHeaderType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseCommonHeaderType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;b99c44da-dae7-3c96-b528-58852537d063&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSFailureResponseCommonHeaderType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseStatusType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseStatusType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;1db688e2-3afe-3b03-9795-fdbfa80fa240&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSFailureResponseStatusType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSRequestCommonHeaderType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSRequestCommonHeaderType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;31022456-e85b-3a9b-9ecb-a09691792d3e&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSRequestCommonHeaderType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseCommonHeaderType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseCommonHeaderType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;d6075720-622e-3a0d-827a-aa4580a2f5d7&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSSuccessResponseCommonHeaderType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseStatusType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseStatusType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;948359ff-3308-3ac5-a5ec-6e3c1b9cd4d5&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_CDSSuccessResponseStatusType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;63a6fd26-2fd6-3a0e-8a27-49a5d2ea4644&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_EventDetailsAlbum:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbumType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbumType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;a0407d0b-5719-38bf-9529-25ad62ace8c4&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_EventDetailsAlbumType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_HandleAAIFailureResponseTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_HandleAAIFailureResponseTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;28e894dc-4ab8-3469-aab7-d81bd05bb4c9&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_HandleAAIFailureResponseTask:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_HandleAAISuccessResponseTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_HandleAAISuccessResponseTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;073f1433-999e-3506-98ad-ef820d2fa7f0&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_HandleAAISuccessResponseTask:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_HandleVesEventTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_HandleVesEventTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;afc6ed46-6801-3c85-bb4c-0ab5b0dd4a74&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_HandleVesEventTask:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_LogStatusEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_LogStatusEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;98e1ddd7-3bd9-30c1-b877-4b9b4d3bff15&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_LogStatusEvent:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_VesEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_VesEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;0f57665a-f0a9-314e-ad0a-04c1f5758174&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_VesEvent:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;ba5d9a46-8cb4-3fbe-84fd-eabba5b7dd4b&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_VesEventHandlerPolicy:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_VesEventType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_VesEventType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;9fd7a967-57d4-36ef-81e9-c3396f3aa8d1&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleCL_VesEventType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleLongType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleLongType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;2dfcd9ec-a6f9-3f9f-958f-9b36cf4ac574&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleLongType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;8a4957cf-9493-3a76-8c22-a208e23259af&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;SimpleStringType:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;ecc97b87-f30b-344c-a476-d36501bf5cbd&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;onap.policies.apex.Simplecontrolloop:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Albums&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Albums&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;1469671a-56dd-3a68-bf6c-77a5cf7a9487&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;onap.policies.apex.Simplecontrolloop_Albums:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Events&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Events&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;23c4eee4-aba5-36f6-96d6-46f40061bfed&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;onap.policies.apex.Simplecontrolloop_Events:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_KeyInfo&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_KeyInfo&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;ea9e73ff-483c-3827-896c-6eaa9d69bc6e&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;onap.policies.apex.Simplecontrolloop_KeyInfo:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Policies&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Policies&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;38c068e5-bb9a-3997-9e50-ec77c66825c8&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;onap.policies.apex.Simplecontrolloop_Policies:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Schemas&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Schemas&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;38514b27-8b9b-3d06-844a-3aced27deb0a&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;onap.policies.apex.Simplecontrolloop_Schemas:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Tasks&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Tasks&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;UUID&quot;: &quot;0e0387b5-07fa-30e4-8554-eb51d2e18939&quot;,&#xd;
                                            &quot;description&quot;: &quot;Generated description for concept referred to by key \&quot;onap.policies.apex.Simplecontrolloop_Tasks:0.0.1\&quot;&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;policies&quot;: {&#xd;
                            &quot;key&quot;: {&#xd;
                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Policies&quot;,&#xd;
                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                            },&#xd;
                            &quot;policyMap&quot;: {&#xd;
                                &quot;entry&quot;: [&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;policyKey&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;template&quot;: &quot;Freestyle&quot;,&#xd;
                                            &quot;state&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;SimpleCL_ReceiveAAIFailureResponseState&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;stateKey&quot;: {&#xd;
                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;,&#xd;
                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;localName&quot;: &quot;SimpleCL_ReceiveAAIFailureResponseState&quot;&#xd;
                                                            },&#xd;
                                                            &quot;trigger&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseEvent&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateOutputs&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: &quot;AAIFailureStateOutput&quot;,&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveAAIFailureResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;AAIFailureStateOutput&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outgoingEvent&quot;: {&#xd;
                                                                                &quot;name&quot;: &quot;SimpleCL_LogStatusEvent&quot;,&#xd;
                                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;nextState&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.0&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;NULL&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            },&#xd;
                                                            &quot;contextAlbumReference&quot;: [],&#xd;
                                                            &quot;taskSelectionLogic&quot;: {&#xd;
                                                                &quot;key&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;logicFlavour&quot;: &quot;UNDEFINED&quot;,&#xd;
                                                                &quot;logic&quot;: &quot;&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateFinalizerLogicMap&quot;: {&#xd;
                                                                &quot;entry&quot;: []&#xd;
                                                            },&#xd;
                                                            &quot;defaultTask&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_HandleAAIFailureResponseTask&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;taskReferences&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: {&#xd;
                                                                            &quot;name&quot;: &quot;SimpleCL_HandleAAIFailureResponseTask&quot;,&#xd;
                                                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                        },&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveAAIFailureResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outputType&quot;: &quot;DIRECT&quot;,&#xd;
                                                                            &quot;output&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_AAIFailureResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveAAIFailureResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;AAIFailureStateOutput&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            }&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;firstState&quot;: &quot;SimpleCL_ReceiveAAIFailureResponseState&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;policyKey&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;template&quot;: &quot;Freestyle&quot;,&#xd;
                                            &quot;state&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;SimpleCL_ReceiveAAISuccessResponseState&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;stateKey&quot;: {&#xd;
                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;,&#xd;
                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;localName&quot;: &quot;SimpleCL_ReceiveAAISuccessResponseState&quot;&#xd;
                                                            },&#xd;
                                                            &quot;trigger&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseEvent&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateOutputs&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: &quot;AAISuccessStateOutput&quot;,&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveAAISuccessResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;AAISuccessStateOutput&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outgoingEvent&quot;: {&#xd;
                                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestEvent&quot;,&#xd;
                                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;nextState&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.0&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;NULL&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            },&#xd;
                                                            &quot;contextAlbumReference&quot;: [],&#xd;
                                                            &quot;taskSelectionLogic&quot;: {&#xd;
                                                                &quot;key&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;logicFlavour&quot;: &quot;UNDEFINED&quot;,&#xd;
                                                                &quot;logic&quot;: &quot;&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateFinalizerLogicMap&quot;: {&#xd;
                                                                &quot;entry&quot;: []&#xd;
                                                            },&#xd;
                                                            &quot;defaultTask&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_HandleAAISuccessResponseTask&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;taskReferences&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: {&#xd;
                                                                            &quot;name&quot;: &quot;SimpleCL_HandleAAISuccessResponseTask&quot;,&#xd;
                                                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                        },&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveAAISuccessResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outputType&quot;: &quot;DIRECT&quot;,&#xd;
                                                                            &quot;output&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_AAISuccessResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveAAISuccessResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;AAISuccessStateOutput&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            }&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;firstState&quot;: &quot;SimpleCL_ReceiveAAISuccessResponseState&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;policyKey&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;template&quot;: &quot;Freestyle&quot;,&#xd;
                                            &quot;state&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseState&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;stateKey&quot;: {&#xd;
                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;,&#xd;
                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;localName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseState&quot;&#xd;
                                                            },&#xd;
                                                            &quot;trigger&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseEvent&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateOutputs&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: &quot;ConfigModifyFailureResponseOutput&quot;,&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;ConfigModifyFailureResponseOutput&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outgoingEvent&quot;: {&#xd;
                                                                                &quot;name&quot;: &quot;SimpleCL_LogStatusEvent&quot;,&#xd;
                                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;nextState&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.0&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;NULL&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            },&#xd;
                                                            &quot;contextAlbumReference&quot;: [],&#xd;
                                                            &quot;taskSelectionLogic&quot;: {&#xd;
                                                                &quot;key&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;logicFlavour&quot;: &quot;UNDEFINED&quot;,&#xd;
                                                                &quot;logic&quot;: &quot;&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateFinalizerLogicMap&quot;: {&#xd;
                                                                &quot;entry&quot;: []&#xd;
                                                            },&#xd;
                                                            &quot;defaultTask&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseTask&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;taskReferences&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: {&#xd;
                                                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseTask&quot;,&#xd;
                                                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                        },&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outputType&quot;: &quot;DIRECT&quot;,&#xd;
                                                                            &quot;output&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;ConfigModifyFailureResponseOutput&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            }&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;firstState&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseState&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;policyKey&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;template&quot;: &quot;Freestyle&quot;,&#xd;
                                            &quot;state&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseState&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;stateKey&quot;: {&#xd;
                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;,&#xd;
                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;localName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseState&quot;&#xd;
                                                            },&#xd;
                                                            &quot;trigger&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseEvent&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateOutputs&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: &quot;ConfigModifySuccessResponseOutput&quot;,&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;ConfigModifySuccessResponseOutput&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outgoingEvent&quot;: {&#xd;
                                                                                &quot;name&quot;: &quot;SimpleCL_LogStatusEvent&quot;,&#xd;
                                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;nextState&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.0&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;NULL&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            },&#xd;
                                                            &quot;contextAlbumReference&quot;: [],&#xd;
                                                            &quot;taskSelectionLogic&quot;: {&#xd;
                                                                &quot;key&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;logicFlavour&quot;: &quot;UNDEFINED&quot;,&#xd;
                                                                &quot;logic&quot;: &quot;&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateFinalizerLogicMap&quot;: {&#xd;
                                                                &quot;entry&quot;: []&#xd;
                                                            },&#xd;
                                                            &quot;defaultTask&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseTask&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;taskReferences&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: {&#xd;
                                                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseTask&quot;,&#xd;
                                                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                        },&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outputType&quot;: &quot;DIRECT&quot;,&#xd;
                                                                            &quot;output&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;ConfigModifySuccessResponseOutput&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            }&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;firstState&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseState&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;policyKey&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;template&quot;: &quot;Freestyle&quot;,&#xd;
                                            &quot;state&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;SimpleCL_ReceiveVesState&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;stateKey&quot;: {&#xd;
                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;,&#xd;
                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;localName&quot;: &quot;SimpleCL_ReceiveVesState&quot;&#xd;
                                                            },&#xd;
                                                            &quot;trigger&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_VesEvent&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateOutputs&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: &quot;VesOutput&quot;,&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveVesState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;VesOutput&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outgoingEvent&quot;: {&#xd;
                                                                                &quot;name&quot;: &quot;SimpleCL_AAIRequestEvent&quot;,&#xd;
                                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;nextState&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.0&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;NULL&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;NULL&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            },&#xd;
                                                            &quot;contextAlbumReference&quot;: [],&#xd;
                                                            &quot;taskSelectionLogic&quot;: {&#xd;
                                                                &quot;key&quot;: &quot;NULL&quot;,&#xd;
                                                                &quot;logicFlavour&quot;: &quot;UNDEFINED&quot;,&#xd;
                                                                &quot;logic&quot;: &quot;&quot;&#xd;
                                                            },&#xd;
                                                            &quot;stateFinalizerLogicMap&quot;: {&#xd;
                                                                &quot;entry&quot;: []&#xd;
                                                            },&#xd;
                                                            &quot;defaultTask&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_HandleVesEventTask&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;taskReferences&quot;: {&#xd;
                                                                &quot;entry&quot;: [&#xd;
                                                                    {&#xd;
                                                                        &quot;key&quot;: {&#xd;
                                                                            &quot;name&quot;: &quot;SimpleCL_HandleVesEventTask&quot;,&#xd;
                                                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                                        },&#xd;
                                                                        &quot;value&quot;: {&#xd;
                                                                            &quot;key&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveVesState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;&#xd;
                                                                            },&#xd;
                                                                            &quot;outputType&quot;: &quot;DIRECT&quot;,&#xd;
                                                                            &quot;output&quot;: {&#xd;
                                                                                &quot;parentKeyName&quot;: &quot;SimpleCL_VesEventHandlerPolicy&quot;,&#xd;
                                                                                &quot;parentKeyVersion&quot;: &quot;0.0.1&quot;,&#xd;
                                                                                &quot;parentLocalName&quot;: &quot;SimpleCL_ReceiveVesState&quot;,&#xd;
                                                                                &quot;localName&quot;: &quot;VesOutput&quot;&#xd;
                                                                            }&#xd;
                                                                        }&#xd;
                                                                    }&#xd;
                                                                ]&#xd;
                                                            }&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;firstState&quot;: &quot;SimpleCL_ReceiveVesState&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;tasks&quot;: {&#xd;
                            &quot;key&quot;: {&#xd;
                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Tasks&quot;,&#xd;
                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                            },&#xd;
                            &quot;taskMap&quot;: {&#xd;
                                &quot;entry&quot;: [&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;inputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseCommonHeaderType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestPayloadType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;status&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;status&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseStatusType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;outputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;message&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;message&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;taskParameters&quot;: {&#xd;
                                                &quot;entry&quot;: []&#xd;
                                            },&#xd;
                                            &quot;contextAlbumReference&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                                    &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;taskLogic&quot;: {&#xd;
                                                &quot;key&quot;: &quot;TaskLogic&quot;,&#xd;
                                                &quot;logicFlavour&quot;: &quot;JAVASCRIPT&quot;,&#xd;
                                                &quot;logic&quot;: &quot;var uuidType = java.util.UUID;\nvar longType = java.lang.Long;\nvar HashMapType = java.util.HashMap;\n\nvar cdsResponse = executor.inFields;\nvar albumID = cdsResponse.get(\&quot;commonHeader\&quot;).get(\&quot;subRequestId\&quot;);\n\nvar eventDetailsAlbum = executor.getContextAlbum(\&quot;SimpleCL_EventDetailsAlbum\&quot;).get(albumID.toString());\nvar commonEventHeader = eventDetailsAlbum.get(\&quot;commonEventHeader\&quot;);\nvar timestamp = longType(new Date().getTime())\nvar errorMessage = \&quot;CDS operation failed. Error message from CDS - \&quot; + executor.inFields.get(\&quot;status\&quot;).get(\&quot;errorMessage\&quot;);\nsend(commonEventHeader.get(\&quot;eventId\&quot;), \&quot;PNF\&quot;, eventDetailsAlbum.get(\&quot;otherFields\&quot;).get(\&quot;hashMap\&quot;).get(\&quot;pnfName\&quot;), timestamp, \&quot;FINAL_FAILURE\&quot;, \&quot;Failed to process VES event. Reason: \&quot; + errorMessage);\ntrue;\n\nfunction send(id, targetType, targetId, timestamp, status, message) {\n    var logData = &apos;{&apos;\n       +&apos;\&quot;id\&quot; : \&quot;&apos; + id + &apos;\&quot;,&apos;\n       +&apos;\&quot;target\&quot;  : {&apos;\n            +&apos;\&quot;targetType\&quot;  : \&quot;&apos; + targetType + &apos;\&quot;,&apos;\n            +&apos;\&quot;entityInfo\&quot;  : {&apos;\n                +&apos;\&quot;pnf-name\&quot;  : \&quot;&apos; + targetId + &apos;\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;component\&quot;  : {&apos;\n            +&apos;\&quot;name\&quot;  : \&quot;Policy\&quot;,&apos;\n            +&apos;\&quot;flavour\&quot;  : \&quot;Apex-PDP\&quot;,&apos;\n            +&apos;\&quot;timestamp\&quot;  : &apos; + timestamp + &apos;,&apos;\n            +&apos;\&quot;status\&quot;  : \&quot;&apos; + status + &apos;\&quot;,&apos;\n            +&apos;\&quot;message\&quot;  : \&quot;&apos; + message + &apos;\&quot;,&apos;\n            +&apos;\&quot;artifacts\&quot;  : {&apos;\n                +&apos;\&quot;policyName\&quot;  : \&quot;onap.policies.apex.Simplecontrolloop\&quot;,&apos;\n                +&apos;\&quot;policyVersion\&quot;  : \&quot;1.0.0\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;otherFields\&quot;  : {&apos;\n            +&apos;\&quot;useCaseName\&quot;  : \&quot;simple-controlloop-usecase\&quot;&apos;\n       +&apos;}&apos;\n    +&apos;}&apos;;\n\n    executor.logger.info(\&quot;sending the status to log.\&quot;);\n    fireLogEvent(logData);\n}\n\nfunction fireLogEvent(logEvent){\n    var headers = new HashMapType();\n    //headers.put(\&quot;Authorization\&quot; , \&quot;Basic Y2NzZGthcHBzOmNjc2RrYXBwcw==\&quot;);\n    executor.logger.info(\&quot;LogEvent:\&quot;+logEvent);\n    var response = new org.onap.policy.rest.RestManager().post(\n            executor.getParameters().get(\&quot;logUrl\&quot;),\n            \&quot;\&quot;,\n            \&quot;\&quot;,\n            headers,\n            \&quot;application/json\&quot;,\n            logEvent\n    );\n    executor.logger.info(\&quot;DMaaP Response after sending LogEvent: \&quot; + response);\n    return response;\n}&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;inputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseCommonHeaderType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyResponsePayloadType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;status&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;status&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseStatusType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;outputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;message&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;message&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;taskParameters&quot;: {&#xd;
                                                &quot;entry&quot;: []&#xd;
                                            },&#xd;
                                            &quot;contextAlbumReference&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                                    &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;taskLogic&quot;: {&#xd;
                                                &quot;key&quot;: &quot;TaskLogic&quot;,&#xd;
                                                &quot;logicFlavour&quot;: &quot;JAVASCRIPT&quot;,&#xd;
                                                &quot;logic&quot;: &quot;var uuidType = java.util.UUID;\nvar longType = java.lang.Long;\nvar HashMapType = java.util.HashMap;\n\nvar cdsResponse = executor.inFields;\nvar albumID = cdsResponse.get(\&quot;commonHeader\&quot;).get(\&quot;subRequestId\&quot;);\nvar eventDetailsAlbum = executor.getContextAlbum(\&quot;SimpleCL_EventDetailsAlbum\&quot;).get(albumID.toString());\nvar commonEventHeader = eventDetailsAlbum.get(\&quot;commonEventHeader\&quot;);\nvar timestamp = longType(new Date().getTime());\n\nsend(commonEventHeader.get(\&quot;eventId\&quot;), \&quot;PNF\&quot;, eventDetailsAlbum.get(\&quot;otherFields\&quot;).get(\&quot;hashMap\&quot;).get(\&quot;pnfName\&quot;), timestamp, \&quot;FINAL_SUCCESS\&quot;, \&quot;Successfully processed the VES event. Hostname is updated.\&quot;)\ntrue;\n\nfunction send(id, targetType, targetId, timestamp, status, message) {\n    var logData = &apos;{&apos;\n       +&apos;\&quot;id\&quot; : \&quot;&apos; + id + &apos;\&quot;,&apos;\n       +&apos;\&quot;target\&quot;  : {&apos;\n            +&apos;\&quot;targetType\&quot;  : \&quot;&apos; + targetType + &apos;\&quot;,&apos;\n            +&apos;\&quot;entityInfo\&quot;  : {&apos;\n                +&apos;\&quot;pnf-name\&quot;  : \&quot;&apos; + targetId + &apos;\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;component\&quot;  : {&apos;\n            +&apos;\&quot;name\&quot;  : \&quot;Policy\&quot;,&apos;\n            +&apos;\&quot;flavour\&quot;  : \&quot;Apex-PDP\&quot;,&apos;\n            +&apos;\&quot;timestamp\&quot;  : &apos; + timestamp + &apos;,&apos;\n            +&apos;\&quot;status\&quot;  : \&quot;&apos; + status + &apos;\&quot;,&apos;\n            +&apos;\&quot;message\&quot;  : \&quot;&apos; + message + &apos;\&quot;,&apos;\n            +&apos;\&quot;artifacts\&quot;  : {&apos;\n                +&apos;\&quot;policyName\&quot;  : \&quot;onap.policies.apex.Simplecontrolloop\&quot;,&apos;\n                +&apos;\&quot;policyVersion\&quot;  : \&quot;1.0.0\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;otherFields\&quot;  : {&apos;\n            +&apos;\&quot;useCaseName\&quot;  : \&quot;simple-controlloop-usecase\&quot;&apos;\n       +&apos;}&apos;\n    +&apos;}&apos;;\n\n    executor.logger.info(\&quot;sending the status to log.\&quot;);\n    fireLogEvent(logData);\n}\n\nfunction fireLogEvent(logEvent){\n    var headers = new HashMapType();\n    //headers.put(\&quot;Authorization\&quot; , \&quot;Basic Y2NzZGthcHBzOmNjc2RrYXBwcw==\&quot;);\n    executor.logger.info(\&quot;LogEvent:\&quot;+logEvent);\n    var response = new org.onap.policy.rest.RestManager().post(\n            executor.getParameters().get(\&quot;logUrl\&quot;),\n            \&quot;\&quot;,\n            \&quot;\&quot;,\n            headers,\n            \&quot;application/json\&quot;,\n            logEvent\n    );\n    executor.logger.info(\&quot;DMaaP Response after sending LogEvent: \&quot; + response);\n    return response;\n}&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_HandleAAIFailureResponseTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_HandleAAIFailureResponseTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;inputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;requestError&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;requestError&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_AAIRequestErrorType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;outputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;message&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;message&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;taskParameters&quot;: {&#xd;
                                                &quot;entry&quot;: []&#xd;
                                            },&#xd;
                                            &quot;contextAlbumReference&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                                    &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;taskLogic&quot;: {&#xd;
                                                &quot;key&quot;: &quot;TaskLogic&quot;,&#xd;
                                                &quot;logicFlavour&quot;: &quot;JAVASCRIPT&quot;,&#xd;
                                                &quot;logic&quot;: &quot;var uuidType = java.util.UUID;\nvar longType = java.lang.Long;\nvar HashMapType = java.util.HashMap;\n\nvar aaiErrorMessage = \&quot;AAI operation failed. Error message from AAI - \&quot; + executor.inFields.get(\&quot;requestError\&quot;).get(\&quot;serviceException\&quot;).get(\&quot;text\&quot;);\nvar timestamp = longType(new Date().getTime());\n\n//Sending messageId received from AAI error message since eventId is not available in this task logic\nsend(executor.inFields.get(\&quot;requestError\&quot;).get(\&quot;serviceException\&quot;).get(\&quot;messageId\&quot;), \&quot;PNF\&quot;, \&quot;N/A\&quot;, timestamp, \&quot;FINAL_FAILURE\&quot;, \&quot;Failed to process VES event. Reason: \&quot; + aaiErrorMessage)\ntrue;\n\nfunction send(id, targetType, targetId, timestamp, status, message) {\n    var logData = &apos;{&apos;\n       +&apos;\&quot;id\&quot; : \&quot;&apos; + id + &apos;\&quot;,&apos;\n       +&apos;\&quot;target\&quot;  : {&apos;\n            +&apos;\&quot;targetType\&quot;  : \&quot;&apos; + targetType + &apos;\&quot;,&apos;\n            +&apos;\&quot;entityInfo\&quot;  : {&apos;\n                +&apos;\&quot;pnf-name\&quot;  : \&quot;&apos; + targetId + &apos;\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;component\&quot;  : {&apos;\n            +&apos;\&quot;name\&quot;  : \&quot;Policy\&quot;,&apos;\n            +&apos;\&quot;flavour\&quot;  : \&quot;Apex-PDP\&quot;,&apos;\n            +&apos;\&quot;timestamp\&quot;  : &apos; + timestamp + &apos;,&apos;\n            +&apos;\&quot;status\&quot;  : \&quot;&apos; + status + &apos;\&quot;,&apos;\n            +&apos;\&quot;message\&quot;  : \&quot;&apos; + message + &apos;\&quot;,&apos;\n            +&apos;\&quot;artifacts\&quot;  : {&apos;\n                +&apos;\&quot;policyName\&quot;  : \&quot;onap.policies.apex.Simplecontrolloop\&quot;,&apos;\n                +&apos;\&quot;policyVersion\&quot;  : \&quot;1.0.0\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;otherFields\&quot;  : {&apos;\n            +&apos;\&quot;useCaseName\&quot;  : \&quot;simple-controlloop-usecase\&quot;&apos;\n       +&apos;}&apos;\n    +&apos;}&apos;;\n\n    executor.logger.info(\&quot;sending the status to log.\&quot;);\n    fireLogEvent(logData);\n}\n\nfunction fireLogEvent(logEvent){\n    var headers = new HashMapType();\n    //headers.put(\&quot;Authorization\&quot; , \&quot;Basic Y2NzZGthcHBzOmNjc2RrYXBwcw==\&quot;);\n    executor.logger.info(\&quot;LogEvent:\&quot;+logEvent);\n    var response = new org.onap.policy.rest.RestManager().post(\n            executor.getParameters().get(\&quot;logUrl\&quot;),\n            \&quot;\&quot;,\n            \&quot;\&quot;,\n            headers,\n            \&quot;application/json\&quot;,\n            logEvent\n    );\n    executor.logger.info(\&quot;DMaaP Response after sending LogEvent: \&quot; + response);\n    return response;\n}&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_HandleAAISuccessResponseTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_HandleAAISuccessResponseTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;inputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;equip-model&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;equip-model&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;equip-type&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;equip-type&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;equip-vendor&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;equip-vendor&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;in-maint&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;in-maint&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleBooleanType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;ipaddress-v4-oam&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;ipaddress-v4-oam&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;ipaddress-v6-oam&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;ipaddress-v6-oam&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;management-option&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;management-option&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;pnf-id&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;pnf-id&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;pnf-name&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;pnf-name&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;pnf-name2&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;pnf-name2&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;resource-version&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;resource-version&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;outputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSRequestCommonHeaderType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestPayloadType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;taskParameters&quot;: {&#xd;
                                                &quot;entry&quot;: []&#xd;
                                            },&#xd;
                                            &quot;contextAlbumReference&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                                    &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;taskLogic&quot;: {&#xd;
                                                &quot;key&quot;: &quot;TaskLogic&quot;,&#xd;
                                                &quot;logicFlavour&quot;: &quot;JAVASCRIPT&quot;,&#xd;
                                                &quot;logic&quot;: &quot;var uuidType = java.util.UUID;\nvar HashMapType = java.util.HashMap;\nvar longType = java.lang.Long;\n\nvar pnfDetails = executor.inFields;\nvar albumID = pnfDetails.get(\&quot;pnf-id\&quot;);\nvar eventDetailsAlbum = executor.getContextAlbum(\&quot;SimpleCL_EventDetailsAlbum\&quot;).get(albumID.toString());\nexecutor.logger.info(\&quot;HandleAAISuccessResponseTask extracted context album - \&quot; + albumID.toString() + \&quot;::\&quot; + eventDetailsAlbum);\n\nvar commonEventHeader = eventDetailsAlbum.get(\&quot;commonEventHeader\&quot;);\nvar otherFieldsMap = eventDetailsAlbum.get(\&quot;otherFields\&quot;).get(\&quot;hashMap\&quot;);\n\nvar targetEntityName = executor.inFields.get(\&quot;pnf-name\&quot;)\nvar logMessage = \&quot;\&quot;;\nvar existingHostname = executor.inFields.get(\&quot;pnf-name2\&quot;);\nvar hostnameInVesEvent = otherFieldsMap.get(\&quot;hostname\&quot;);\n\nvar albumSchemaHelper = executor.getContextAlbum(\&quot;SimpleCL_EventDetailsAlbum\&quot;).getSchemaHelper();\nvar target = albumSchemaHelper.createNewSubInstance(\&quot;target\&quot;);\ntarget.put(\&quot;targetType\&quot;,  \&quot;PNF\&quot;)\nvar entityInfo = albumSchemaHelper.createNewSubInstance(\&quot;entityInfo\&quot;);\nentityInfo.put(\&quot;name\&quot;,targetEntityName);\ntarget.put(\&quot;entityInfo\&quot;, entityInfo);\neventDetailsAlbum.put(\&quot;target\&quot;, target);\n\nvar returnVal = true;\nvar timestamp = longType(new Date().getTime());\nif ((String(hostnameInVesEvent) != \&quot;UNDEFINED\&quot;) &amp;&amp; (String(existingHostname) != String(hostnameInVesEvent))) {\n    logMessage = \&quot;Hostname available in AAI does not match with the hostname received in the VES Event.\&quot;;\n    returnVal = false\n    send(commonEventHeader.get(\&quot;eventId\&quot;), \&quot;PNF\&quot;, otherFieldsMap.get(\&quot;pnfName\&quot;), timestamp, \&quot;FINAL_FAILURE\&quot;, \&quot;Failed to process VES event. Reason: \&quot; + logMessage)\n} else {\n    logMessage = \&quot;Received response from AAI successfully. Hostname in AAI matches with the one in Ves event. Going to make the update-config request to CDS.\&quot;;\n\n    var commonHeader = executor.subject.getOutFieldSchemaHelper(\&quot;commonHeader\&quot;).createNewInstance();\n    commonHeader.put(\&quot;subRequestId\&quot;, albumID.toString());\n    commonHeader.put(\&quot;requestId\&quot;, commonEventHeader.get(\&quot;eventId\&quot;));\n    commonHeader.put(\&quot;originatorId\&quot;, \&quot;POLICY\&quot;);\n\n    var blueprintName = \&quot;pnf-test-cba\&quot;;\n    var blueprintVersion = \&quot;1.0.0\&quot;;\n    var newHostname = \&quot;host\&quot; + Math.random().toString(36).substring(7);\n    eventDetailsAlbum.put(\&quot;generatedHostname\&quot;, newHostname);\n\n    var actionIdentifiers = executor.subject.getOutFieldSchemaHelper(\&quot;actionIdentifiers\&quot;).createNewInstance();\n    actionIdentifiers.put(\&quot;mode\&quot;, \&quot;sync\&quot;);\n    actionIdentifiers.put(\&quot;blueprintName\&quot;, blueprintName);\n    actionIdentifiers.put(\&quot;blueprintVersion\&quot;, blueprintVersion);\n    actionIdentifiers.put(\&quot;actionName\&quot;, \&quot;update-config\&quot;);\n\n    var payloadEntry = executor.subject.getOutFieldSchemaHelper(\&quot;payload\&quot;).createNewSubInstance(\&quot;CDSConfigModifyRequestPayloadEntry\&quot;);\n    payloadEntry.put(\&quot;hostname\&quot;,  newHostname)\n    payloadEntry.put(\&quot;IP\&quot;, executor.inFields.get(\&quot;ipaddress-v4-oam\&quot;));\n    payloadEntry.put(\&quot;pnfName\&quot;, otherFieldsMap.get(\&quot;pnfName\&quot;));\n\n    var payload = executor.subject.getOutFieldSchemaHelper(\&quot;payload\&quot;).createNewInstance();\n    payload.put(\&quot;update_DasH_config_DasH_request\&quot;, payloadEntry);\n\n    executor.outFields.put(\&quot;commonHeader\&quot;, commonHeader);\n    executor.outFields.put(\&quot;actionIdentifiers\&quot;, actionIdentifiers);\n    executor.outFields.put(\&quot;payload\&quot;, payload);\n\n    send(commonEventHeader.get(\&quot;eventId\&quot;), \&quot;PNF\&quot;, otherFieldsMap.get(\&quot;pnfName\&quot;), timestamp, \&quot;SUCCESS\&quot;, logMessage)\n}\n\nreturnVal;\n\nfunction send(id, targetType, targetId, timestamp, status, message) {\n    var logData = &apos;{&apos;\n       +&apos;\&quot;id\&quot; : \&quot;&apos; + id + &apos;\&quot;,&apos;\n       +&apos;\&quot;target\&quot;  : {&apos;\n            +&apos;\&quot;targetType\&quot;  : \&quot;&apos; + targetType + &apos;\&quot;,&apos;\n            +&apos;\&quot;entityInfo\&quot;  : {&apos;\n                +&apos;\&quot;pnf-name\&quot;  : \&quot;&apos; + targetId + &apos;\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;component\&quot;  : {&apos;\n            +&apos;\&quot;name\&quot;  : \&quot;Policy\&quot;,&apos;\n            +&apos;\&quot;flavour\&quot;  : \&quot;Apex-PDP\&quot;,&apos;\n            +&apos;\&quot;timestamp\&quot;  : &apos; + timestamp + &apos;,&apos;\n            +&apos;\&quot;status\&quot;  : \&quot;&apos; + status + &apos;\&quot;,&apos;\n            +&apos;\&quot;message\&quot;  : \&quot;&apos; + message + &apos;\&quot;,&apos;\n            +&apos;\&quot;artifacts\&quot;  : {&apos;\n                +&apos;\&quot;policyName\&quot;  : \&quot;onap.policies.apex.Simplecontrolloop\&quot;,&apos;\n                +&apos;\&quot;policyVersion\&quot;  : \&quot;1.0.0\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;otherFields\&quot;  : {&apos;\n            +&apos;\&quot;useCaseName\&quot;  : \&quot;simple-controlloop-usecase\&quot;&apos;\n       +&apos;}&apos;\n    +&apos;}&apos;;\n\n    executor.logger.info(\&quot;sending the status to log.\&quot;);\n    fireLogEvent(logData);\n}\n\nfunction fireLogEvent(logEvent){\n    var headers = new HashMapType();\n    //headers.put(\&quot;Authorization\&quot; , \&quot;Basic Y2NzZGthcHBzOmNjc2RrYXBwcw==\&quot;);\n    executor.logger.info(\&quot;LogEvent:\&quot;+logEvent);\n    var response = new org.onap.policy.rest.RestManager().post(\n            executor.getParameters().get(\&quot;logUrl\&quot;),\n            \&quot;\&quot;,\n            \&quot;\&quot;,\n            headers,\n            \&quot;application/json\&quot;,\n            logEvent\n    );\n    executor.logger.info(\&quot;DMaaP Response after sending LogEvent: \&quot; + response);\n    return response;\n}&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_HandleVesEventTask&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_HandleVesEventTask&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;inputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;event&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;event&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_VesEventType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;outputFields&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;aaifield&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;aaifield&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;taskParameters&quot;: {&#xd;
                                                &quot;entry&quot;: []&#xd;
                                            },&#xd;
                                            &quot;contextAlbumReference&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                                    &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;taskLogic&quot;: {&#xd;
                                                &quot;key&quot;: &quot;TaskLogic&quot;,&#xd;
                                                &quot;logicFlavour&quot;: &quot;JAVASCRIPT&quot;,&#xd;
                                                &quot;logic&quot;: &quot;var uuidType = java.util.UUID;\nvar HashMapType = java.util.HashMap;\nvar longType = java.lang.Long;\n\nvar eventDetailsAlbum = executor.getContextAlbum(\&quot;SimpleCL_EventDetailsAlbum\&quot;).getSchemaHelper().createNewInstance();\nvar returnValue = true;\n\nvar event = executor.inFields.get(\&quot;event\&quot;);\nexecutor.logger.info(\&quot;HandleVesEventTask processing VES event - \&quot; + event);\n\nvar commonEventHeader = event.get(\&quot;commonEventHeader\&quot;);\nvar otherFields = event.get(\&quot;otherFields\&quot;);\n// albumID will be used to fetch info from our album later. Storing event data in album by sourceId / AAI pnf-id, the same will be sent to CDS request payload as subRequestId\nvar albumID = commonEventHeader.get(\&quot;sourceId\&quot;);\n// save the event processing start time in apex\ncommonEventHeader.put(\&quot;startEpochMicrosec\&quot;, longType(new Date().getTime()));\n//save the incoming event details to album\neventDetailsAlbum.put(\&quot;commonEventHeader\&quot;, commonEventHeader);\neventDetailsAlbum.put(\&quot;otherFields\&quot;, otherFields);\nexecutor.getContextAlbum(\&quot;SimpleCL_EventDetailsAlbum\&quot;).put(albumID.toString(), eventDetailsAlbum);\nexecutor.logger.info(\&quot;HandleVesEventTask storing context album - \&quot; + albumID.toString() + \&quot;::\&quot; + eventDetailsAlbum);\n\nexecutor.getExecutionProperties().setProperty(\&quot;pnfName\&quot;, otherFields.get(\&quot;hashMap\&quot;).get(\&quot;pnfName\&quot;));\n\nvar timestamp = longType(new Date().getTime());\nsend(eventDetailsAlbum.get(\&quot;commonEventHeader\&quot;).get(\&quot;eventId\&quot;), \&quot;PNF\&quot;, otherFields.get(\&quot;hashMap\&quot;).get(\&quot;pnfName\&quot;), timestamp, \&quot;ACTIVE\&quot;, \&quot;VES event has been received. Going to fetch details from AAI.\&quot;)\nexecutor.logger.info(executor.outFields);\nreturnValue;\n\nfunction send(id, targetType, targetId, timestamp, status, message) {\n    var logData = &apos;{&apos;\n       +&apos;\&quot;id\&quot; : \&quot;&apos; + id + &apos;\&quot;,&apos;\n       +&apos;\&quot;target\&quot;  : {&apos;\n            +&apos;\&quot;targetType\&quot;  : \&quot;&apos; + targetType + &apos;\&quot;,&apos;\n            +&apos;\&quot;entityInfo\&quot;  : {&apos;\n                +&apos;\&quot;pnf-name\&quot;  : \&quot;&apos; + targetId + &apos;\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;component\&quot;  : {&apos;\n            +&apos;\&quot;name\&quot;  : \&quot;Policy\&quot;,&apos;\n            +&apos;\&quot;flavour\&quot;  : \&quot;Apex-PDP\&quot;,&apos;\n            +&apos;\&quot;timestamp\&quot;  : &apos; + timestamp + &apos;,&apos;\n            +&apos;\&quot;status\&quot;  : \&quot;&apos; + status + &apos;\&quot;,&apos;\n            +&apos;\&quot;message\&quot;  : \&quot;&apos; + message + &apos;\&quot;,&apos;\n            +&apos;\&quot;artifacts\&quot;  : {&apos;\n                +&apos;\&quot;policyName\&quot;  : \&quot;onap.policies.apex.Simplecontrolloop\&quot;,&apos;\n                +&apos;\&quot;policyVersion\&quot;  : \&quot;1.0.0\&quot;&apos;\n            +&apos;}&apos;\n       +&apos;},&apos;\n       +&apos;\&quot;otherFields\&quot;  : {&apos;\n            +&apos;\&quot;useCaseName\&quot;  : \&quot;simple-controlloop-usecase\&quot;&apos;\n       +&apos;}&apos;\n    +&apos;}&apos;;\n\n    executor.logger.info(\&quot;sending the status to log.\&quot;);\n    fireLogEvent(logData);\n}\n\nfunction fireLogEvent(logEvent){\n    var headers = new HashMapType();\n    //headers.put(\&quot;Authorization\&quot; , \&quot;Basic Y2NzZGthcHBzOmNjc2RrYXBwcw==\&quot;);\n    executor.logger.info(\&quot;LogEvent:\&quot;+logEvent);\n    var response = new org.onap.policy.rest.RestManager().post(\n            executor.getParameters().get(\&quot;logUrl\&quot;),\n            \&quot;\&quot;,\n            \&quot;\&quot;,\n            headers,\n            \&quot;application/json\&quot;,\n            logEvent\n    );\n    executor.logger.info(\&quot;DMaaP Response after sending LogEvent: \&quot; + response);\n    return response;\n}&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;events&quot;: {&#xd;
                            &quot;key&quot;: {&#xd;
                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Events&quot;,&#xd;
                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                            },&#xd;
                            &quot;eventMap&quot;: {&#xd;
                                &quot;entry&quot;: [&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAIFailureResponseEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;nameSpace&quot;: &quot;org.onap.policy.apex.simplecontrolloop&quot;,&#xd;
                                            &quot;source&quot;: &quot;AAI&quot;,&#xd;
                                            &quot;target&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;parameter&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;requestError&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;requestError&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_AAIRequestErrorType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;toscaPolicyState&quot;: &quot;EXIT_FAILURE&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAIRequestEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAIRequestEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;nameSpace&quot;: &quot;org.onap.policy.apex.simplecontrolloop&quot;,&#xd;
                                            &quot;source&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;target&quot;: &quot;AAI&quot;,&#xd;
                                            &quot;parameter&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;aaifield&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;aaifield&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;toscaPolicyState&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAISuccessResponseEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;nameSpace&quot;: &quot;org.onap.policy.apex.simplecontrolloop&quot;,&#xd;
                                            &quot;source&quot;: &quot;AAI&quot;,&#xd;
                                            &quot;target&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;parameter&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;equip-model&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;equip-model&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;equip-type&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;equip-type&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;equip-vendor&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;equip-vendor&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;in-maint&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;in-maint&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleBooleanType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;ipaddress-v4-oam&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;ipaddress-v4-oam&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;ipaddress-v6-oam&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;ipaddress-v6-oam&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;management-option&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;management-option&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;pnf-id&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;pnf-id&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;pnf-name&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;pnf-name&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;pnf-name2&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;pnf-name2&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;resource-version&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;resource-version&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;toscaPolicyState&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyFailureResponseEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;nameSpace&quot;: &quot;org.onap.policy.apex.simplecontrolloop&quot;,&#xd;
                                            &quot;source&quot;: &quot;CDS&quot;,&#xd;
                                            &quot;target&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;parameter&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseCommonHeaderType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestPayloadType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;status&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;status&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseStatusType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;toscaPolicyState&quot;: &quot;EXIT_FAILURE&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;nameSpace&quot;: &quot;org.onap.policy.apex.simplecontrolloop&quot;,&#xd;
                                            &quot;source&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;target&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;parameter&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSRequestCommonHeaderType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestPayloadType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;toscaPolicyState&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;nameSpace&quot;: &quot;org.onap.policy.apex.simplecontrolloop&quot;,&#xd;
                                            &quot;source&quot;: &quot;CDS&quot;,&#xd;
                                            &quot;target&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;parameter&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;actionIdentifiers&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;commonHeader&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseCommonHeaderType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;payload&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyResponsePayloadType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    },&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;status&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;status&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseStatusType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;toscaPolicyState&quot;: &quot;EXIT_SUCCESS&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_LogStatusEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_LogStatusEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;nameSpace&quot;: &quot;org.onap.policy.apex.simplecontrolloop&quot;,&#xd;
                                            &quot;source&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;target&quot;: &quot;DCAE&quot;,&#xd;
                                            &quot;parameter&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;message&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;message&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;toscaPolicyState&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_VesEvent&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_VesEvent&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;nameSpace&quot;: &quot;org.onap.policy.apex.simplecontrolloop&quot;,&#xd;
                                            &quot;source&quot;: &quot;DCAE&quot;,&#xd;
                                            &quot;target&quot;: &quot;APEX&quot;,&#xd;
                                            &quot;parameter&quot;: {&#xd;
                                                &quot;entry&quot;: [&#xd;
                                                    {&#xd;
                                                        &quot;key&quot;: &quot;event&quot;,&#xd;
                                                        &quot;value&quot;: {&#xd;
                                                            &quot;key&quot;: &quot;event&quot;,&#xd;
                                                            &quot;fieldSchemaKey&quot;: {&#xd;
                                                                &quot;name&quot;: &quot;SimpleCL_VesEventType&quot;,&#xd;
                                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                                            },&#xd;
                                                            &quot;optional&quot;: false&#xd;
                                                        }&#xd;
                                                    }&#xd;
                                                ]&#xd;
                                            },&#xd;
                                            &quot;toscaPolicyState&quot;: &quot;ENTRY&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;albums&quot;: {&#xd;
                            &quot;key&quot;: {&#xd;
                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Albums&quot;,&#xd;
                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                            },&#xd;
                            &quot;albums&quot;: {&#xd;
                                &quot;entry&quot;: [&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbum&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;scope&quot;: &quot;policy&quot;,&#xd;
                                            &quot;isWritable&quot;: true,&#xd;
                                            &quot;itemSchema&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbumType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            }&#xd;
                                        }&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;schemas&quot;: {&#xd;
                            &quot;key&quot;: {&#xd;
                                &quot;name&quot;: &quot;onap.policies.apex.Simplecontrolloop_Schemas&quot;,&#xd;
                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                            },&#xd;
                            &quot;schemas&quot;: {&#xd;
                                &quot;entry&quot;: [&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleBooleanType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleBooleanType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Java&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;java.lang.Boolean&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_AAIRequestErrorType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_AAIRequestErrorType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n  \&quot;name\&quot;: \&quot;AAIRequestErrorType\&quot;,\n  \&quot;type\&quot;: \&quot;record\&quot;,\n  \&quot;fields\&quot;: [\n    {\n      \&quot;name\&quot;: \&quot;serviceException\&quot;,\n      \&quot;type\&quot;: {\n        \&quot;name\&quot;: \&quot;serviceException\&quot;,\n        \&quot;type\&quot;: \&quot;record\&quot;,\n        \&quot;fields\&quot;: [\n          {\n            \&quot;name\&quot;: \&quot;messageId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;text\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;variables\&quot;,\n            \&quot;type\&quot;: {\n              \&quot;type\&quot;: \&quot;array\&quot;,\n              \&quot;items\&quot;: \&quot;string\&quot;\n            }\n          }\n        ]\n      }\n    }\n  ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSActionIdentifiersType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n    \&quot;type\&quot;: \&quot;record\&quot;,\n    \&quot;name\&quot;: \&quot;CDSActionIdentifiers_Type\&quot;,\n    \&quot;fields\&quot;: [\n        {\n            \&quot;name\&quot;: \&quot;actionName\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;blueprintName\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;blueprintVersion\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;mode\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        }\n    ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestPayloadType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyRequestPayloadType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n  \&quot;type\&quot;: \&quot;map\&quot;,\n  \&quot;values\&quot;: {\n    \&quot;type\&quot;: \&quot;record\&quot;,\n    \&quot;name\&quot;: \&quot;CDSConfigModifyRequestPayloadEntry\&quot;,\n    \&quot;fields\&quot;: [\n      {\n        \&quot;name\&quot;: \&quot;hostname\&quot;,\n        \&quot;type\&quot;: \&quot;string\&quot;\n      },\n      {\n        \&quot;name\&quot;: \&quot;IP\&quot;,\n        \&quot;type\&quot;: \&quot;string\&quot;\n      },\n      {\n        \&quot;name\&quot;: \&quot;pnfName\&quot;,\n        \&quot;type\&quot;: \&quot;string\&quot;\n      }\n    ]\n  }\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyResponsePayloadType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSConfigModifyResponsePayloadType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n  \&quot;name\&quot;: \&quot;CDSConfigResponsePayloadEntry\&quot;,\n  \&quot;type\&quot;: \&quot;record\&quot;,\n  \&quot;fields\&quot;: [\n    {\n      \&quot;name\&quot;: \&quot;update_DasH_config_DasH_response\&quot;,\n      \&quot;type\&quot;: {\n        \&quot;name\&quot;: \&quot;update_DasH_config_DasH_response\&quot;,\n        \&quot;type\&quot;: \&quot;record\&quot;,\n        \&quot;fields\&quot;: [\n          {\n              \&quot;name\&quot;: \&quot;execute_DasH_command_DasH_logs\&quot;,\n              \&quot;type\&quot;: {\n                \&quot;type\&quot;: \&quot;array\&quot;,\n                \&quot;items\&quot;: \&quot;string\&quot;\n              }\n          },\n          {\n              \&quot;name\&quot;: \&quot;prepare_DasH_environment_DasH_logs\&quot;,\n              \&quot;type\&quot;: {\n                \&quot;type\&quot;: \&quot;array\&quot;,\n                \&quot;items\&quot;: \&quot;string\&quot;\n              }\n          }\n        ]\n      }\n    }\n  ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseCommonHeaderType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseCommonHeaderType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n    \&quot;type\&quot;: \&quot;record\&quot;,\n    \&quot;name\&quot;: \&quot;CDSResponseCommonHeader_Type\&quot;,\n    \&quot;fields\&quot;: [\n        {\n            \&quot;name\&quot;: \&quot;originatorId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;requestId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;subRequestId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;timestamp\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        }\n    ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseStatusType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSFailureResponseStatusType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n    \&quot;type\&quot;: \&quot;record\&quot;,\n    \&quot;name\&quot;: \&quot;CDSResponseStatus_Type\&quot;,\n    \&quot;fields\&quot;: [\n        {\n            \&quot;name\&quot;: \&quot;code\&quot;,\n            \&quot;type\&quot;: \&quot;int\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;timestamp\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;message\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;errorMessage\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        }\n    ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSRequestCommonHeaderType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSRequestCommonHeaderType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n    \&quot;type\&quot;: \&quot;record\&quot;,\n    \&quot;name\&quot;: \&quot;CDSRequestCommonHeader_Type\&quot;,\n    \&quot;fields\&quot;: [\n        {\n            \&quot;name\&quot;: \&quot;originatorId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;requestId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;subRequestId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        }\n    ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseCommonHeaderType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseCommonHeaderType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n    \&quot;type\&quot;: \&quot;record\&quot;,\n    \&quot;name\&quot;: \&quot;CDSResponseCommonHeader_Type\&quot;,\n    \&quot;fields\&quot;: [\n        {\n            \&quot;name\&quot;: \&quot;originatorId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;requestId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;subRequestId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;timestamp\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        }\n    ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseStatusType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_CDSSuccessResponseStatusType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n    \&quot;type\&quot;: \&quot;record\&quot;,\n    \&quot;name\&quot;: \&quot;CDSResponseStatus_Type\&quot;,\n    \&quot;fields\&quot;: [\n        {\n            \&quot;name\&quot;: \&quot;code\&quot;,\n            \&quot;type\&quot;: \&quot;int\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;eventType\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;timestamp\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        },\n        {\n            \&quot;name\&quot;: \&quot;message\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n        }\n    ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbumType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_EventDetailsAlbumType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n  \&quot;name\&quot;: \&quot;eventDetails\&quot;,\n  \&quot;type\&quot;: \&quot;record\&quot;,\n  \&quot;fields\&quot;: [\n    {\n      \&quot;name\&quot;: \&quot;commonEventHeader\&quot;,\n      \&quot;type\&quot;: {\n        \&quot;name\&quot;: \&quot;commonEventHeader\&quot;,\n        \&quot;type\&quot;: \&quot;record\&quot;,\n        \&quot;fields\&quot;: [\n          {\n            \&quot;name\&quot;: \&quot;domain\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;eventId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;eventName\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;lastEpochMicrosec\&quot;,\n            \&quot;type\&quot;: \&quot;long\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;priority\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;reportingEntityName\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;sequence\&quot;,\n            \&quot;type\&quot;: \&quot;int\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;sourceId\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;sourceName\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;startEpochMicrosec\&quot;,\n            \&quot;type\&quot;: \&quot;long\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;timeZoneOffset\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;version\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;internalHeaderFields\&quot;,\n            \&quot;type\&quot;: {\n              \&quot;name\&quot;: \&quot;internalHeaderFields\&quot;,\n              \&quot;type\&quot;: \&quot;record\&quot;,\n              \&quot;fields\&quot;: []\n            }\n          },\n          {\n            \&quot;name\&quot;: \&quot;vesEventListenerVersion\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          }\n        ]\n      }\n    },\n    {\n      \&quot;name\&quot;: \&quot;otherFields\&quot;,\n      \&quot;type\&quot;: {\n        \&quot;name\&quot;: \&quot;otherFields\&quot;,\n        \&quot;type\&quot;: \&quot;record\&quot;,\n        \&quot;fields\&quot;: [\n          {\n            \&quot;name\&quot;: \&quot;hashMap\&quot;,\n            \&quot;type\&quot;: {\n              \&quot;name\&quot;: \&quot;hashMap\&quot;,\n              \&quot;type\&quot;: \&quot;record\&quot;,\n              \&quot;fields\&quot;: [\n                {\n                  \&quot;name\&quot;: \&quot;hostname\&quot;,\n                  \&quot;type\&quot;: \&quot;string\&quot;\n                },\n                {\n                  \&quot;name\&quot;: \&quot;pnfName\&quot;,\n                  \&quot;type\&quot;: \&quot;string\&quot;\n                },\n                {\n                  \&quot;name\&quot;: \&quot;pnfId\&quot;,\n                  \&quot;type\&quot;: \&quot;string\&quot;\n                },\n                {\n                  \&quot;name\&quot;: \&quot;ip\&quot;,\n                  \&quot;type\&quot;: \&quot;string\&quot;\n                }\n              ]\n            }\n          },\n          {\n            \&quot;name\&quot;: \&quot;otherFieldsVersion\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          }\n        ]\n      }\n    },\n    {\n      \&quot;name\&quot;: \&quot;target\&quot;,\n      \&quot;type\&quot;: {\n        \&quot;name\&quot;: \&quot;target\&quot;,\n        \&quot;type\&quot;: \&quot;record\&quot;,\n        \&quot;fields\&quot;: [\n          {\n            \&quot;name\&quot;: \&quot;targetType\&quot;,\n            \&quot;type\&quot;: \&quot;string\&quot;\n          },\n          {\n            \&quot;name\&quot;: \&quot;entityInfo\&quot;,\n            \&quot;type\&quot;: {\n              \&quot;name\&quot;: \&quot;entityInfo\&quot;,\n              \&quot;type\&quot;: \&quot;record\&quot;,\n              \&quot;fields\&quot;: [\n                {\n                  \&quot;name\&quot;: \&quot;name\&quot;,\n                  \&quot;type\&quot;: \&quot;string\&quot;\n                }\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \&quot;name\&quot;: \&quot;generatedHostname\&quot;,\n      \&quot;type\&quot;: \&quot;string\&quot;\n    }\n  ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleCL_VesEventType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleCL_VesEventType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Avro&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;{\n   \&quot;name\&quot;:\&quot;event\&quot;,\n   \&quot;type\&quot;:\&quot;record\&quot;,\n   \&quot;fields\&quot;:[\n      {\n         \&quot;name\&quot;:\&quot;commonEventHeader\&quot;,\n         \&quot;type\&quot;:{\n            \&quot;name\&quot;:\&quot;commonEventHeader\&quot;,\n            \&quot;type\&quot;:\&quot;record\&quot;,\n            \&quot;fields\&quot;:[\n               {\n                  \&quot;name\&quot;:\&quot;domain\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;eventId\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;eventName\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;lastEpochMicrosec\&quot;,\n                  \&quot;type\&quot;:\&quot;long\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;priority\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;reportingEntityName\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;sequence\&quot;,\n                  \&quot;type\&quot;:\&quot;int\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;sourceId\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;sourceName\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;startEpochMicrosec\&quot;,\n                  \&quot;type\&quot;:\&quot;long\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;version\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               },\n               {\n                  \&quot;name\&quot;:\&quot;internalHeaderFields\&quot;,\n                  \&quot;type\&quot;:{\n                     \&quot;name\&quot;:\&quot;internalHeaderFields\&quot;,\n                     \&quot;type\&quot;:\&quot;record\&quot;,\n                     \&quot;fields\&quot;:[\n\n                     ]\n                  }\n               },\n               {\n                  \&quot;name\&quot;:\&quot;vesEventListenerVersion\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               }\n            ]\n         }\n      },\n      {\n         \&quot;name\&quot;:\&quot;otherFields\&quot;,\n         \&quot;type\&quot;:{\n            \&quot;name\&quot;:\&quot;otherFields\&quot;,\n            \&quot;type\&quot;:\&quot;record\&quot;,\n            \&quot;fields\&quot;:[\n               {\n                  \&quot;name\&quot;:\&quot;hashMap\&quot;,\n                  \&quot;type\&quot;:{\n                     \&quot;name\&quot;:\&quot;hashMap\&quot;,\n                     \&quot;type\&quot;:\&quot;record\&quot;,\n                     \&quot;fields\&quot;:[\n                        {\n                           \&quot;name\&quot;:\&quot;hostname\&quot;,\n                           \&quot;type\&quot;:\&quot;string\&quot;\n                        },\n                        {\n                           \&quot;name\&quot;:\&quot;pnfName\&quot;,\n                           \&quot;type\&quot;:\&quot;string\&quot;\n                        },\n                        {\n                           \&quot;name\&quot;:\&quot;pnfId\&quot;,\n                           \&quot;type\&quot;:\&quot;string\&quot;\n                        },\n                        {\n                           \&quot;name\&quot;:\&quot;ip\&quot;,\n                           \&quot;type\&quot;:\&quot;string\&quot;\n                        }\n                     ]\n                  }\n               },\n               {\n                  \&quot;name\&quot;:\&quot;otherFieldsVersion\&quot;,\n                  \&quot;type\&quot;:\&quot;string\&quot;\n               }\n            ]\n         }\n      }\n   ]\n}&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleLongType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleLongType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Java&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;java.lang.Long&quot;&#xd;
                                        }&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;key&quot;: {&#xd;
                                            &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                            &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                        },&#xd;
                                        &quot;value&quot;: {&#xd;
                                            &quot;key&quot;: {&#xd;
                                                &quot;name&quot;: &quot;SimpleStringType&quot;,&#xd;
                                                &quot;version&quot;: &quot;0.0.1&quot;&#xd;
                                            },&#xd;
                                            &quot;schemaFlavour&quot;: &quot;Java&quot;,&#xd;
                                            &quot;schemaDefinition&quot;: &quot;java.lang.String&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/nodetemplates</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.node_types instanceof Map;
    assert res.topology_template instanceof Map;
    assert res.topology_template.node_templates instanceof Map;
    assert res.topology_template.node_templates.get(&quot;apex.metadata.pnf&quot;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Monitoring" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;onap.restart.tca&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.monitoring.cdap.tca.hi.lo.app&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;onap.restart.tca&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;tca_policy&quot;: {&#xd;
                            &quot;domain&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                            &quot;metricsPerEventName&quot;: [&#xd;
                                {&#xd;
                                    &quot;eventName&quot;: &quot;Measurement_vGMUX&quot;,&#xd;
                                    &quot;controlLoopSchemaType&quot;: &quot;VNF&quot;,&#xd;
                                    &quot;policyScope&quot;: &quot;DCAE&quot;,&#xd;
                                    &quot;policyName&quot;: &quot;DCAE.Config_tca-hi-lo&quot;,&#xd;
                                    &quot;policyVersion&quot;: &quot;v0.0.1&quot;,&#xd;
                                    &quot;thresholds&quot;: [&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;EQUAL&quot;,&#xd;
                                            &quot;severity&quot;: &quot;MAJOR&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ABATED&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;GREATER&quot;,&#xd;
                                            &quot;severity&quot;: &quot;CRITICAL&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Monitoring V2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;onap.restart.tca&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.monitoring.cdap.tca.hi.lo.app&quot;,&#xd;
                    &quot;type_version&quot;: &quot;7.0.${__threadNum}&quot;,&#xd;
                    &quot;version&quot;: &quot;7.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;onap.restart.tca&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;tca_policy&quot;: {&#xd;
                            &quot;domain&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                            &quot;metricsPerEventName&quot;: [&#xd;
                                {&#xd;
                                    &quot;eventName&quot;: &quot;Measurement_vGMUX&quot;,&#xd;
                                    &quot;controlLoopSchemaType&quot;: &quot;VNF&quot;,&#xd;
                                    &quot;policyScope&quot;: &quot;DCAE&quot;,&#xd;
                                    &quot;policyName&quot;: &quot;DCAE.Config_tca-hi-lo&quot;,&#xd;
                                    &quot;policyVersion&quot;: &quot;v0.0.1&quot;,&#xd;
                                    &quot;thresholds&quot;: [&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;EQUAL&quot;,&#xd;
                                            &quot;severity&quot;: &quot;MAJOR&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ABATED&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;GREATER&quot;,&#xd;
                                            &quot;severity&quot;: &quot;CRITICAL&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Optimization" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Affinity_Default&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.AffinityPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Affinity_Default&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [],&#xd;
                        &quot;resources&quot;: [],&#xd;
                        &quot;geography&quot;: [],&#xd;
                        &quot;identity&quot;: &quot;affinity_vCPE&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;affinityProperties&quot;: {&#xd;
                            &quot;qualifier&quot;: &quot;same&quot;,&#xd;
                            &quot;category&quot;: &quot;complex&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/2.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Guard" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;topology_template&quot;: {&#xd;
      &quot;policies&quot;: [&#xd;
         {&#xd;
            &quot;guard.blacklist.scaleout&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.policies.controlloop.guard.common.Blacklist&quot;,&#xd;
               &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
               &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
               &quot;metadata&quot;: {&#xd;
                  &quot;policy-id&quot;: &quot;guard.blacklist.scaleout&quot;&#xd;
               },&#xd;
               &quot;properties&quot;: {&#xd;
                  &quot;actor&quot;: &quot;SO&quot;,&#xd;
                  &quot;operation&quot;: &quot;VF Module Create&quot;,&#xd;
                  &quot;id&quot;: &quot;ControlLoop-vDNS-6f37f56d-a87d-4b85-b6a9-cc953cf779b3&quot;,&#xd;
                  &quot;blacklist&quot;: [&#xd;
                     &quot;the-vfmodule-where-root-is-true&quot;,&#xd;
                     &quot;another-vfmodule-where-root-is-true&quot;&#xd;
                  ]&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Native APEX" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
  &quot;topology_template&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
      {&#xd;
        &quot;operational.apex.vCPE&quot;: {&#xd;
          &quot;type&quot;: &quot;onap.policies.native.Apex&quot;,&#xd;
          &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
          &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
          &quot;name&quot;: &quot;operational.apex.vCPE&quot;,&#xd;
          &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;engineServiceParameters&quot;: {&#xd;
              &quot;name&quot;: &quot;MyApexEngine&quot;,&#xd;
              &quot;version&quot;: &quot;0.0.1&quot;,&#xd;
              &quot;id&quot;: 45,&#xd;
              &quot;instanceCount&quot;: 4,&#xd;
              &quot;deploymentPort&quot;: 12561,&#xd;
              &quot;policy_type_impl&quot;: {&#xd;
              },&#xd;
              &quot;engineParameters&quot;: {&#xd;
                &quot;executorParameters&quot;: {&#xd;
                  &quot;JAVASCRIPT&quot;: {&#xd;
                    &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.executor.javascript.JavascriptExecutorParameters&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;contextParameters&quot;: {&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.context.parameters.ContextParameters&quot;,&#xd;
                  &quot;schemaParameters&quot;: {&#xd;
                    &quot;Avro&quot;: {&#xd;
                      &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.context.schema.avro.AvroSchemaHelperParameters&quot;&#xd;
                    },&#xd;
                    &quot;Java&quot;: {&#xd;
                      &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.context.impl.schema.java.JavaSchemaHelperParameters&quot;,&#xd;
                      &quot;jsonAdapters&quot;: {&#xd;
                        &quot;Instant&quot;: {&#xd;
                          &quot;adaptedClass&quot;: &quot;java.time.Instant&quot;,&#xd;
                          &quot;adaptorClass&quot;: &quot;org.onap.policy.controlloop.util.Serialization$GsonInstantAdapter&quot;&#xd;
                        }&#xd;
                      }&#xd;
                    }&#xd;
                  }&#xd;
                },&#xd;
                &quot;taskParameters&quot;: [&#xd;
                  {&#xd;
                    &quot;key&quot;: &quot;ParameterKey1&quot;,&#xd;
                    &quot;value&quot;: &quot;ParameterValue1&quot;&#xd;
                  },&#xd;
                  {&#xd;
                    &quot;taskId&quot;: &quot;AAILookupTask:0.0.1&quot;,&#xd;
                    &quot;key&quot;: &quot;SomeKeyForThisTask&quot;,&#xd;
                    &quot;value&quot;: &quot;Value&quot;&#xd;
                  }&#xd;
                ]&#xd;
              }&#xd;
            },&#xd;
            &quot;eventInputParameters&quot;: {&#xd;
              &quot;GuardRequestorConsumer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTREQUESTOR&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restrequestor.RestRequestorCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://111.222.333.444:5555/pdp/api/getDecision&quot;,&#xd;
                    &quot;httpMethod&quot;: &quot;POST&quot;,&#xd;
                    &quot;restRequestTimeout&quot;: 2000,&#xd;
                    &quot;httpHeader&quot;: &quot;Authorization:aaaaaaaaa== ClientAuth:bbbbbbbbb=&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                },&#xd;
                &quot;eventName&quot;: &quot;GuardResponseEvent&quot;,&#xd;
                &quot;eventNameFilter&quot;: &quot;GuardResponseEvent&quot;,&#xd;
                &quot;requestorMode&quot;: true,&#xd;
                &quot;requestorPeer&quot;: &quot;GuardRequestorProducer&quot;,&#xd;
                &quot;requestorTimeout&quot;: 500&#xd;
              },&#xd;
              &quot;DCAEConsumer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://message-router:3904/events/unauthenticated.DCAE_CL_OUTPUT/APEX/1?timeout=60000&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;nameAlias&quot;: &quot;closedLoopControlName&quot;,&#xd;
                    &quot;versionAlias&quot;: &quot;version&quot;,&#xd;
                    &quot;sourceAlias&quot;: &quot;from&quot;,&#xd;
                    &quot;pojoField&quot;: &quot;VirtualControlLoopEvent&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;&#xd;
              },&#xd;
              &quot;APPCConsumer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://message-router:3904/events/APPC-LCM-WRITE/APEX/1?timeout=60000&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;versionAlias&quot;: &quot;version&quot;,&#xd;
                    &quot;pojoField&quot;: &quot;APPCLCMResponseEvent&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventName&quot;: &quot;APPCRestartVNFResponseEvent&quot;,&#xd;
                &quot;eventNameFilter&quot;: &quot;APPCRestartVNFResponseEvent&quot;&#xd;
              }&#xd;
            },&#xd;
            &quot;eventOutputParameters&quot;: {&#xd;
              &quot;logProducer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;FILE&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;fileName&quot;: &quot;/tmp/VCPEEventsOut.json&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                }&#xd;
              },&#xd;
              &quot;GuardRequestorProducer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTREQUESTOR&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restrequestor.RestRequestorCarrierTechnologyParameters&quot;&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                },&#xd;
                &quot;eventNameFilter&quot;: &quot;GuardRequestEvent&quot;,&#xd;
                &quot;requestorMode&quot;: true,&#xd;
                &quot;requestorPeer&quot;: &quot;GuardRequestorConsumer&quot;,&#xd;
                &quot;requestorTimeout&quot;: 500&#xd;
              },&#xd;
              &quot;APPCProducer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://message-router:3904/events/APPC-LCM-READ&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;versionAlias&quot;: &quot;version&quot;,&#xd;
                    &quot;sourceAlias&quot;: &quot;from&quot;,&#xd;
                    &quot;pojoField&quot;: &quot;APPCLCMRequestEvent&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventNameFilter&quot;: &quot;APPCRestartVNFRequestEvent&quot;&#xd;
              },&#xd;
              &quot;PolicyLogProducer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://message-router:3904/events/POLICY-CL-MGT&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;versionAlias&quot;: &quot;version&quot;,&#xd;
                    &quot;sourceAlias&quot;: &quot;from&quot;,&#xd;
                    &quot;pojoField&quot;: &quot;VirtualControlLoopNotification&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventNameFilter&quot;: &quot;ControlLoopLogEvent&quot;&#xd;
              }&#xd;
            }&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Native Drools" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;usecases.artifacts&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.native.drools.Artifact&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;name&quot;: &quot;usecases.artifacts&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;usecases.artifacts&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;rulesArtifact&quot;: {&#xd;
                            &quot;groupId&quot;: &quot;org.onap.policy.drools-applications.controlloop.common&quot;,&#xd;
                            &quot;artifactId&quot;: &quot;controller-usecases&quot;,&#xd;
                            &quot;version&quot;: &quot;1.6.1&quot;&#xd;
                        },&#xd;
                        &quot;controller&quot;: {&#xd;
                            &quot;name&quot;: &quot;frankfurt&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Native XACML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;onap.policies.native.xacml.NativeXacmlPolicy&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.native.Xacml&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;onap.policies.native.xacml.NativeXacmlPolicy&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;tca_policy&quot;: {&#xd;
                            &quot;domain&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                            &quot;metricsPerEventName&quot;: [&#xd;
                                {&#xd;
                                    &quot;eventName&quot;: &quot;Measurement_vGMUX&quot;,&#xd;
                                    &quot;controlLoopSchemaType&quot;: &quot;VNF&quot;,&#xd;
                                    &quot;policyScope&quot;: &quot;DCAE&quot;,&#xd;
                                    &quot;policyName&quot;: &quot;DCAE.Config_tca-hi-lo&quot;,&#xd;
                                    &quot;policyVersion&quot;: &quot;v0.0.1&quot;,&#xd;
                                    &quot;thresholds&quot;: [&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;EQUAL&quot;,&#xd;
                                            &quot;severity&quot;: &quot;MAJOR&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ABATED&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;GREATER&quot;,&#xd;
                                            &quot;severity&quot;: &quot;CRITICAL&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/2.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy with Metadata" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;onap.policies.apex.pnf.Example&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.native.Apex&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;name&quot;: &quot;onap.policies.apex.pnf.Example&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;metadataSetName&quot;: &quot;apex.metadata.pnf&quot;,&#xd;
                        &quot;metadataSetVersion&quot;: &quot;6.0.${__threadNum}&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;engineServiceParameters&quot;: {&#xd;
                            &quot;name&quot;: &quot;TestApexEnginePnf&quot;,&#xd;
                            &quot;version&quot;: &quot;0.0.1&quot;,&#xd;
                            &quot;id&quot;: 45,&#xd;
                            &quot;instanceCount&quot;: 4,&#xd;
                            &quot;deploymentPort&quot;: 12561,&#xd;
                            &quot;engineParameters&quot;: {&#xd;
                                &quot;executorParameters&quot;: {&#xd;
                                    &quot;JAVASCRIPT&quot;: {&#xd;
                                        &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.executor.javascript.JavascriptExecutorParameters&quot;&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;contextParameters&quot;: {&#xd;
                                    &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.context.parameters.ContextParameters&quot;,&#xd;
                                    &quot;schemaParameters&quot;: {&#xd;
                                        &quot;Avro&quot;: {&#xd;
                                            &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.context.schema.avro.AvroSchemaHelperParameters&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;taskParameters&quot;: [&#xd;
                                    {&#xd;
                                        &quot;key&quot;: &quot;logUrl&quot;,&#xd;
                                        &quot;value&quot;: &quot;http://message-router:3904/events/APEX-CL-MGT&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;eventInputParameters&quot;: {&#xd;
                            &quot;SimpleCL_DCAEConsumer&quot;: {&#xd;
                                &quot;carrierTechnologyParameters&quot;: {&#xd;
                                    &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                                    &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                                    &quot;parameters&quot;: {&#xd;
                                        &quot;url&quot;: &quot;http://message-router:3904/events/apex-pnf-input/cl/apex?timeout=30000&quot;&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;eventProtocolParameters&quot;: {&#xd;
                                    &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                                },&#xd;
                                &quot;eventName&quot;: &quot;SimpleCL_VesEvent&quot;&#xd;
                            },&#xd;
                            &quot;SimpleCL_AAIResponseConsumer&quot;: {&#xd;
                                &quot;carrierTechnologyParameters&quot;: {&#xd;
                                    &quot;carrierTechnology&quot;: &quot;RESTREQUESTOR&quot;,&#xd;
                                    &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restrequestor.RestRequestorCarrierTechnologyParameters&quot;,&#xd;
                                    &quot;parameters&quot;: {&#xd;
                                        &quot;url&quot;: &quot;https://aai:8443/aai/v14/network/pnfs/pnf/{pnfName}&quot;,&#xd;
                                        &quot;httpMethod&quot;: &quot;GET&quot;,&#xd;
                                        &quot;httpCodeFilter&quot;: &quot;[2-5][0-1][0-9]&quot;,&#xd;
                                        &quot;httpHeaders&quot;: [&#xd;
                                            [&#xd;
                                                &quot;Accept&quot;,&#xd;
                                                &quot;application/json&quot;&#xd;
                                            ],&#xd;
                                            [&#xd;
                                                &quot;Content-Type&quot;,&#xd;
                                                &quot;application/json&quot;&#xd;
                                            ],&#xd;
                                            [&#xd;
                                                &quot;X-FromAppId&quot;,&#xd;
                                                &quot;dcae-curl&quot;&#xd;
                                            ],&#xd;
                                            [&#xd;
                                                &quot;x-transactionId&quot;,&#xd;
                                                &quot;9998&quot;&#xd;
                                            ],&#xd;
                                            [&#xd;
                                                &quot;Authorization&quot;,&#xd;
                                                &quot;Basic QUFJOkFBSQ==&quot;&#xd;
                                            ]&#xd;
                                        ]&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;eventProtocolParameters&quot;: {&#xd;
                                    &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                                },&#xd;
                                &quot;eventName&quot;: &quot;SimpleCL_AAISuccessResponseEvent|SimpleCL_AAIFailureResponseEvent&quot;,&#xd;
                                &quot;requestorMode&quot;: true,&#xd;
                                &quot;requestorPeer&quot;: &quot;SimpleCL_AAIProducer&quot;,&#xd;
                                &quot;requestorTimeout&quot;: 2000&#xd;
                            },&#xd;
                            &quot;SimpleCL_CDSConfigModifyResponseConsumer&quot;: {&#xd;
                                &quot;carrierTechnologyParameters&quot;: {&#xd;
                                    &quot;carrierTechnology&quot;: &quot;GRPC&quot;,&#xd;
                                    &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.grpc.GrpcCarrierTechnologyParameters&quot;&#xd;
                                },&#xd;
                                &quot;eventProtocolParameters&quot;: {&#xd;
                                    &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                                },&#xd;
                                &quot;eventName&quot;: &quot;SimpleCL_CDSConfigModifySuccessResponseEvent|SimpleCL_CDSConfigModifyFailureResponseEvent&quot;,&#xd;
                                &quot;requestorMode&quot;: true,&#xd;
                                &quot;requestorPeer&quot;: &quot;SimpleCL_CDSConfigModifyRequestProducer&quot;,&#xd;
                                &quot;requestorTimeout&quot;: 500&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;eventOutputParameters&quot;: {&#xd;
                            &quot;SimpleCL_AAIProducer&quot;: {&#xd;
                                &quot;carrierTechnologyParameters&quot;: {&#xd;
                                    &quot;carrierTechnology&quot;: &quot;RESTREQUESTOR&quot;,&#xd;
                                    &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restrequestor.RestRequestorCarrierTechnologyParameters&quot;&#xd;
                                },&#xd;
                                &quot;eventProtocolParameters&quot;: {&#xd;
                                    &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                                },&#xd;
                                &quot;eventNameFilter&quot;: &quot;SimpleCL_AAIRequestEvent&quot;,&#xd;
                                &quot;requestorMode&quot;: true,&#xd;
                                &quot;requestorPeer&quot;: &quot;SimpleCL_AAIResponseConsumer&quot;,&#xd;
                                &quot;requestorTimeout&quot;: 2000&#xd;
                            },&#xd;
                            &quot;SimpleCL_CDSConfigModifyRequestProducer&quot;: {&#xd;
                                &quot;carrierTechnologyParameters&quot;: {&#xd;
                                    &quot;carrierTechnology&quot;: &quot;GRPC&quot;,&#xd;
                                    &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.grpc.GrpcCarrierTechnologyParameters&quot;,&#xd;
                                    &quot;parameters&quot;: {&#xd;
                                        &quot;host&quot;: &quot;cds-blueprints-processor-grpc&quot;,&#xd;
                                        &quot;port&quot;: 9111,&#xd;
                                        &quot;username&quot;: &quot;ccsdkapps&quot;,&#xd;
                                        &quot;password&quot;: &quot;ccsdkapps&quot;,&#xd;
                                        &quot;timeout&quot;: 60&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;eventProtocolParameters&quot;: {&#xd;
                                    &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                                },&#xd;
                                &quot;eventNameFilter&quot;: &quot;SimpleCL_CDSConfigModifyRequestEvent&quot;,&#xd;
                                &quot;requestorMode&quot;: true,&#xd;
                                &quot;requestorPeer&quot;: &quot;SimpleCL_CDSConfigModifyResponseConsumer&quot;,&#xd;
                                &quot;requestorTimeout&quot;: 500&#xd;
                            },&#xd;
                            &quot;SimpleCL_logOutputter&quot;: {&#xd;
                                &quot;carrierTechnologyParameters&quot;: {&#xd;
                                    &quot;carrierTechnology&quot;: &quot;FILE&quot;,&#xd;
                                    &quot;parameters&quot;: {&#xd;
                                        &quot;fileName&quot;: &quot;outputevents.log&quot;&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;eventProtocolParameters&quot;: {&#xd;
                                    &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                                }&#xd;
                            }&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Node Template" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/nodetemplates/apex.metadata.pnf/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof List;
    assert res.size == 1;
    assert res[0].metadata instanceof Map;
    assert res[0].version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All TCA Policies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size &gt; 0 &amp;&amp; res.topology_template.policies.size &lt; 10;


    for (i=0; i&lt;res.topology_template.policies.size; i++) {
        assert res.topology_template.policies[i] instanceof Map;
    }
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Versions of Monitoring Policy" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size &gt; 0 &amp;&amp; res.topology_template.policies.size &lt; 6;

    for (i=0; i&lt;res.topology_template.policies.size; i++) {
        assert res.topology_template.policies[i] instanceof Map;
        assert res.topology_template.policies[i].get(&apos;onap.restart.tca&apos;).version == &quot;6.0.${__threadNum}&quot;;
    }
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Monitoring" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies/onap.restart.tca/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;onap.restart.tca&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Optimization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/6.0.${__threadNum}/policies/OSDF_CASABLANCA.Affinity_Default/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;OSDF_CASABLANCA.Affinity_Default&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Guard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/6.0.${__threadNum}/policies/guard.blacklist.scaleout/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;guard.blacklist.scaleout&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Native APEX" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Apex/versions/6.0.${__threadNum}/policies/operational.apex.vCPE/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;operational.apex.vCPE&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Native Drools" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Artifact/versions/6.0.${__threadNum}/policies/usecases.artifacts/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;usecases.artifacts&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Native XACML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Xacml/versions/6.0.${__threadNum}/policies/onap.policies.native.xacml.NativeXacmlPolicy/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;onap.policies.native.xacml.NativeXacmlPolicy&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get latest Monitoring Policy" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies/onap.restart.tca/versions/latest</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;onap.restart.tca&apos;).version ==~ /6.0.\d+/;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Monitoring" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies/onap.restart.tca/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;onap.restart.tca&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Monitoring V2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies/onap.restart.tca/versions/7.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;onap.restart.tca&apos;).version == &quot;7.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Optimization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/6.0.${__threadNum}/policies/OSDF_CASABLANCA.Affinity_Default/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;OSDF_CASABLANCA.Affinity_Default&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Guard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/6.0.${__threadNum}/policies/guard.blacklist.scaleout/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;guard.blacklist.scaleout&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Native APEX" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Apex/versions/6.0.${__threadNum}/policies/operational.apex.vCPE/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;operational.apex.vCPE&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy (having metadata)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policies/onap.policies.apex.pnf.Example/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;onap.policies.apex.pnf.Example&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Native Drools" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Artifact/versions/6.0.${__threadNum}/policies/usecases.artifacts/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;usecases.artifacts&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Native XACML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Xacml/versions/6.0.${__threadNum}/policies/onap.policies.native.xacml.NativeXacmlPolicy/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;onap.policies.native.xacml.NativeXacmlPolicy&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Monitoring" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;409&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof List;
    assert res.policy_types.size == 1;
    assert res.policy_types[0] instanceof Map;
    assert res.policy_types[0].get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Monitoring V2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/7.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;409&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof List;
    assert res.policy_types.size == 1;
    assert res.policy_types[0] instanceof Map;
    assert res.policy_types[0].get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;).version == &quot;7.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Optimization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;409&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof List;
    assert res.policy_types.size == 1;
    assert res.policy_types[0] instanceof Map;
    assert res.policy_types[0].get(&apos;onap.policies.optimization.resource.AffinityPolicy&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Guard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.controlloop.guard.common.Blacklist&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Native APEX" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Apex/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.Apex&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Native Drools Controller" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Controller/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.drools.Controller&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Native Drools Artifact" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Artifact/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.drools.Artifact&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Native XACML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Xacml/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.Xacml&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Node Template" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/nodetemplates/apex.metadata.pnf/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template instanceof Map;
    assert res.topology_template.node_templates instanceof Map;
    assert res.topology_template.node_templates.get(&quot;apex.metadata.pnf&quot;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Metrics" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/metrics</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    res = prev.getResponseDataAsString();

    assert res.contains(&quot;http_server_requests_seconds_sum&quot;)
    assert res.contains(&quot;http_server_requests_seconds_max&quot;)
    assert res.contains(&quot;spring_data_repository_invocations_seconds_count&quot;)
    assert res.contains(&quot;spring_data_repository_invocations_seconds_sum&quot;)
    assert res.contains(&quot;spring_data_repository_invocations_seconds_max&quot;)
    assert res.contains(&quot;jvm_threads_live_threads&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;POST\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/metrics\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;DELETE\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/nodetemplates/{name}/versions/{version}\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/healthcheck\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes/{policyTypeId}/versions/{policyTypeVersion}/policies/{policyId}/versions/{policyVersion}\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/nodetemplates/{name}/versions/{version}\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;DELETE\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes/{policyTypeId}/versions/{versionId}\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/statistics\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;DELETE\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes/{policyTypeId}/versions/{policyTypeVersion}/policies/{policyId}/versions/{policyVersion}\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes/{policyTypeId}\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes/{policyTypeId}/versions/{versionId}\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;POST\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/nodetemplates\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;POST\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes/{policyTypeId}/versions/{policyTypeVersion}/policies\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;POST\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policies\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes/{policyTypeId}/versions/{policyTypeVersion}/policies\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;GET\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policytypes/{policyTypeId}/versions/{policyTypeVersion}/policies/{policyId}/versions/latest\&quot;,}&quot;)
    assert res.contains(&quot;http_server_requests_seconds_count{exception=\&quot;None\&quot;,method=\&quot;DELETE\&quot;,outcome=\&quot;SUCCESS\&quot;,status=\&quot;200\&quot;,uri=\&quot;/policy/api/v1/policies/{policyId}/versions/{policyVersion}\&quot;,}&quot;)
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name"></stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/plain</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Healthcheck" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/healthcheck</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.code == 200;
    assert res.name == &quot;Policy API&quot;;
    assert res.healthy==true;
    assert res.message==&quot;alive&quot;;
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Preloaded Policy Types" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 38;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/prakhapa/Downloads/performanceTestResultsPolicyApi.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/prakhapa/Downloads/performanceTestResultsPolicyApi.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/prakhapa/Downloads/performanceTestResultsPolicyApi.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/prakhapa/Downloads/stabilityTestResultsPolicyApi.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
