<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Policy API Performance" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="API_HOST" elementType="Argument">
            <stringProp name="Argument.name">API_HOST</stringProp>
            <stringProp name="Argument.value">10.12.5.193</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_PORT" elementType="Argument">
            <stringProp name="Argument.name">API_PORT</stringProp>
            <stringProp name="Argument.value">30709</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
            <stringProp name="Authorization.username">healthcheck</stringProp>
            <stringProp name="Authorization.password">zb!XztG34</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Statistics" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/statistics</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.code == 200;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Preloaded Policy Types" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 33;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API Test Flow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">259200</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Monitoring" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;policy_types&quot;: {&#xd;
        &quot;onap.policies.Monitoring&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
            &quot;version&quot;: &quot;6.0.0&quot;,&#xd;
            &quot;description&quot;: &quot;a base policy type for all policies that govern monitoring provisioning&quot;&#xd;
        },&#xd;
        &quot;onap.policies.monitoring.cdap.tca.hi.lo.app&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;onap.policies.Monitoring&quot;,&#xd;
            &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;tca_policy&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.datatypes.monitoring.tca_policy&quot;,&#xd;
                    &quot;description&quot;: &quot;TCA Policy JSON&quot;,&#xd;
                    &quot;required&quot;: true&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    },&#xd;
    &quot;data_types&quot;: {&#xd;
        &quot;onap.datatypes.monitoring.metricsPerEventName&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;controlLoopSchemaType&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Specifies Control Loop Schema Type for the event Name e.g. VNF, VM&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;VM&quot;,&#xd;
                                &quot;VNF&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;eventName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Event name to which thresholds need to be applied&quot;&#xd;
                },&#xd;
                &quot;policyName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope Name&quot;&#xd;
                },&#xd;
                &quot;policyScope&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope&quot;&#xd;
                },&#xd;
                &quot;policyVersion&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope Version&quot;&#xd;
                },&#xd;
                &quot;thresholds&quot;: {&#xd;
                    &quot;type&quot;: &quot;list&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Thresholds associated with eventName&quot;,&#xd;
                    &quot;entry_schema&quot;: {&#xd;
                        &quot;type&quot;: &quot;onap.datatypes.monitoring.thresholds&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;onap.datatypes.monitoring.tca_policy&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;domain&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Domain name to which TCA needs to be applied&quot;,&#xd;
                    &quot;default&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;equal&quot;: &quot;measurementsForVfScaling&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;metricsPerEventName&quot;: {&#xd;
                    &quot;type&quot;: &quot;list&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Contains eventName and threshold details that need to be applied to given eventName&quot;,&#xd;
                    &quot;entry_schema&quot;: {&#xd;
                        &quot;type&quot;: &quot;onap.datatypes.monitoring.metricsPerEventName&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;onap.datatypes.monitoring.thresholds&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;closedLoopControlName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Closed Loop Control Name associated with the threshold&quot;&#xd;
                },&#xd;
                &quot;closedLoopEventStatus&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Closed Loop Event Status of the threshold&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;ONSET&quot;,&#xd;
                                &quot;ABATED&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;direction&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Direction of the threshold&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;LESS&quot;,&#xd;
                                &quot;LESS_OR_EQUAL&quot;,&#xd;
                                &quot;GREATER&quot;,&#xd;
                                &quot;GREATER_OR_EQUAL&quot;,&#xd;
                                &quot;EQUAL&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;fieldPath&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Json field Path as per CEF message which needs to be analyzed for TCA&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedOctetsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedUnicastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedMulticastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedBroadcastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedDiscardedPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedErrorPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedOctetsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedUnicastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedMulticastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedBroadcastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedDiscardedPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedErrorPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedTotalPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedOctetsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedUnicastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedMulticastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedBroadcastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedDiscardedPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedErrorPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedTotalPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedOctetsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedUnicastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedMulticastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedBroadcastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedDiscardedPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedErrorPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuIdle&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageInterrupt&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageNice&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSoftIrq&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSteal&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSystem&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuWait&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].percentUsage&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.meanRequestLatency&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryBuffered&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryCached&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryConfigured&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryFree&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryUsed&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;severity&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Threshold Event Severity&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;CRITICAL&quot;,&#xd;
                                &quot;MAJOR&quot;,&#xd;
                                &quot;MINOR&quot;,&#xd;
                                &quot;WARNING&quot;,&#xd;
                                &quot;NORMAL&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;thresholdValue&quot;: {&#xd;
                    &quot;type&quot;: &quot;integer&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Threshold value for the field Path inside CEF message&quot;&#xd;
                },&#xd;
                &quot;version&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Version number associated with the threshold&quot;&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Monitoring V7" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;policy_types&quot;: {&#xd;
        &quot;onap.policies.Monitoring&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
            &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
            &quot;description&quot;: &quot;a base policy type for all policies that govern monitoring provisioning&quot;&#xd;
        },&#xd;
        &quot;onap.policies.monitoring.cdap.tca.hi.lo.app&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;onap.policies.Monitoring&quot;,&#xd;
            &quot;version&quot;: &quot;7.0.${__threadNum}&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;tca_policy&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.datatypes.monitoring.tca_policy&quot;,&#xd;
                    &quot;description&quot;: &quot;TCA Policy JSON&quot;,&#xd;
                    &quot;required&quot;: true&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    },&#xd;
    &quot;data_types&quot;: {&#xd;
        &quot;onap.datatypes.monitoring.metricsPerEventName&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;controlLoopSchemaType&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Specifies Control Loop Schema Type for the event Name e.g. VNF, VM&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;VM&quot;,&#xd;
                                &quot;VNF&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;eventName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Event name to which thresholds need to be applied&quot;&#xd;
                },&#xd;
                &quot;policyName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope Name&quot;&#xd;
                },&#xd;
                &quot;policyScope&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope&quot;&#xd;
                },&#xd;
                &quot;policyVersion&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;TCA Policy Scope Version&quot;&#xd;
                },&#xd;
                &quot;thresholds&quot;: {&#xd;
                    &quot;type&quot;: &quot;list&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Thresholds associated with eventName&quot;,&#xd;
                    &quot;entry_schema&quot;: {&#xd;
                        &quot;type&quot;: &quot;onap.datatypes.monitoring.thresholds&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;onap.datatypes.monitoring.tca_policy&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;domain&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Domain name to which TCA needs to be applied&quot;,&#xd;
                    &quot;default&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;equal&quot;: &quot;measurementsForVfScaling&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;metricsPerEventName&quot;: {&#xd;
                    &quot;type&quot;: &quot;list&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Contains eventName and threshold details that need to be applied to given eventName&quot;,&#xd;
                    &quot;entry_schema&quot;: {&#xd;
                        &quot;type&quot;: &quot;onap.datatypes.monitoring.metricsPerEventName&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;onap.datatypes.monitoring.thresholds&quot;: {&#xd;
            &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
            &quot;properties&quot;: {&#xd;
                &quot;closedLoopControlName&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Closed Loop Control Name associated with the threshold&quot;&#xd;
                },&#xd;
                &quot;closedLoopEventStatus&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Closed Loop Event Status of the threshold&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;ONSET&quot;,&#xd;
                                &quot;ABATED&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;direction&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Direction of the threshold&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;LESS&quot;,&#xd;
                                &quot;LESS_OR_EQUAL&quot;,&#xd;
                                &quot;GREATER&quot;,&#xd;
                                &quot;GREATER_OR_EQUAL&quot;,&#xd;
                                &quot;EQUAL&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;fieldPath&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Json field Path as per CEF message which needs to be analyzed for TCA&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedOctetsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedUnicastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedMulticastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedBroadcastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedDiscardedPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedErrorPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedTotalPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedOctetsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedUnicastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedMulticastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedBroadcastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedDiscardedPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].receivedErrorPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedTotalPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedOctetsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedUnicastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedMulticastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedBroadcastPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedDiscardedPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedErrorPacketsDelta&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedTotalPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedOctetsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedUnicastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedMulticastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedBroadcastPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedDiscardedPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.vNicPerformanceArray[*].transmittedErrorPacketsAccumulated&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuIdle&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageInterrupt&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageNice&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSoftIrq&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSteal&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuUsageSystem&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].cpuWait&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.cpuUsageArray[*].percentUsage&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.meanRequestLatency&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryBuffered&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryCached&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryConfigured&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryFree&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.memoryUsageArray[*].memoryUsed&quot;,&#xd;
                                &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;severity&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Threshold Event Severity&quot;,&#xd;
                    &quot;constraints&quot;: [&#xd;
                        {&#xd;
                            &quot;valid_values&quot;: [&#xd;
                                &quot;CRITICAL&quot;,&#xd;
                                &quot;MAJOR&quot;,&#xd;
                                &quot;MINOR&quot;,&#xd;
                                &quot;WARNING&quot;,&#xd;
                                &quot;NORMAL&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;thresholdValue&quot;: {&#xd;
                    &quot;type&quot;: &quot;integer&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Threshold value for the field Path inside CEF message&quot;&#xd;
                },&#xd;
                &quot;version&quot;: {&#xd;
                    &quot;type&quot;: &quot;string&quot;,&#xd;
                    &quot;required&quot;: true,&#xd;
                    &quot;description&quot;: &quot;Version number associated with the threshold&quot;&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Optimization" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.optimization.resource.AffinityPolicy&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.optimization.Resource&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;applicableResources&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;string&quot;,&#xd;
                  &quot;constraints&quot;: [&#xd;
                     {&#xd;
                        &quot;valid_values&quot;: [&#xd;
                           &quot;any&quot;,&#xd;
                           &quot;all&quot;&#xd;
                        ]&#xd;
                     }&#xd;
                  ]&#xd;
               }&#xd;
            },&#xd;
            &quot;affinityProperties&quot;: {&#xd;
               &quot;type&quot;: &quot;policy.data.affinityProperties_properties&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;data_types&quot;: {&#xd;
      &quot;policy.data.affinityProperties_properties&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.nodes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;qualifier&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;constraints&quot;: [&#xd;
                  {&#xd;
                     &quot;valid_values&quot;: [&#xd;
                        &quot;same&quot;,&#xd;
                        &quot;different&quot;&#xd;
                     ]&#xd;
                  }&#xd;
               ]&#xd;
            },&#xd;
            &quot;category&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 1;
    assert res.policy_types.values()[0] instanceof Map;
 //   assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Guard" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.controlloop.guard.common.Blacklist&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.controlloop.guard.Common&quot;,&#xd;
         &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;description&quot;: &quot;Supports blacklist of entity id&apos;s from performing control loop actions on.&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;blacklist&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;description&quot;: &quot;List of entity id&apos;s not allowed to have control loop operations on.&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;string&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 1;
    assert res.policy_types.values()[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Native APEX" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.Native&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
         &quot;description&quot;: &quot;a base policy type for all native PDP policies&quot;,&#xd;
         &quot;version&quot;: &quot;1.0.0&quot;&#xd;
      },&#xd;
      &quot;onap.policies.native.Apex&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.Native&quot;,&#xd;
         &quot;description&quot;: &quot;a policy type for native apex policies&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;engine_service&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.EngineService&quot;,&#xd;
               &quot;description&quot;: &quot;APEX Engine Service Parameters&quot;&#xd;
            },&#xd;
            &quot;inputs&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;description&quot;: &quot;Inputs for handling events coming into the APEX engine&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.native.apex.EventHandler&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;outputs&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;description&quot;: &quot;Outputs for handling events going out of the APEX engine&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.native.apex.EventHandler&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;environment&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;description&quot;: &quot;Envioronmental parameters for the APEX engine&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.native.apex.Environment&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;data_types&quot;: {&#xd;
      &quot;onap.datatypes.native.apex.EngineService&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the engine name&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: &quot;ApexEngineService&quot;&#xd;
            },&#xd;
            &quot;version&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the engine version in double dotted format&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: &quot;1.0.0&quot;&#xd;
            },&#xd;
            &quot;id&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the engine id&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;instance_count&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the number of engine threads that should be run&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;deployment_port&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the port to connect to for engine administration&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: 1&#xd;
            },&#xd;
            &quot;policy_model_file_name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The name of the file from which to read the APEX policy model&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;policy_type_impl&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The policy type implementation from which to read the APEX policy model&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;periodic_event_period&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The time interval in milliseconds for the periodic scanning event, 0 means don&apos;t scan&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;engine&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.engineservice.Engine&quot;,&#xd;
               &quot;description&quot;: &quot;The parameters for all engines in the APEX engine service&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.EventHandler&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event handler name, if not specified this is set to the key name&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;carrier_technology&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.CarrierTechnology&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the carrier technology of the event handler (such as REST/Web Socket/Kafka)&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;event_protocol&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.EventProtocol&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event protocol of events for the event handler (such as Yaml/JSON/XML/POJO)&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;event_name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event name for events on this event handler, if not specified, the event name is read from or written to the event being received or sent&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;event_name_filter&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies a filter as a regular expression, events that do not match the filter are dropped, the default is to let all events through&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;synchronous_mode&quot;: {&#xd;
               &quot;type&quot;: &quot;boolean&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event handler is syncronous (receive event and send response)&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: false&#xd;
            },&#xd;
            &quot;synchronous_peer&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The peer event handler (output for input or input for output) of this event handler in synchronous mode, this parameter is mandatory if the event handler is in synchronous mode&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;synchronous_timeout&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;The timeout in milliseconds for responses to be issued by APEX torequests, this parameter is mandatory if the event handler is in synchronous mode&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;requestor_mode&quot;: {&#xd;
               &quot;type&quot;: &quot;boolean&quot;,&#xd;
               &quot;description&quot;: &quot;Specifies the event handler is in requestor mode (send event and wait for response mode)&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;default&quot;: false&#xd;
            },&#xd;
            &quot;requestor_peer&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The peer event handler (output for input or input for output) of this event handler in requestor mode, this parameter is mandatory if the event handler is in requestor mode&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;requestor_timeout&quot;: {&#xd;
               &quot;type&quot;: &quot;integer&quot;,&#xd;
               &quot;description&quot;: &quot;The timeout in milliseconds for wait for responses to requests, this parameter is mandatory if the event handler is in requestor mode&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.CarrierTechnology&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;label&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The label (name) of the carrier technology (such as REST, Kafka, WebSocket)&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;plugin_parameter_class_name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The class name of the class that overrides default handling of event input or output for this carrier technology, defaults to the supplied input or output class&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.EventProtocol&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;label&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The label (name) of the event protocol (such as Yaml, JSON, XML, or POJO)&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;event_protocol_plugin_class&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The class name of the class that overrides default handling of the event protocol for this carrier technology, defaults to the supplied event protocol class&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.Environment&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The name of the environment variable&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;value&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The value of the environment variable&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.engineservice.Engine&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;context&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.engineservice.engine.Context&quot;,&#xd;
               &quot;description&quot;: &quot;The properties for handling context in APEX engines, defaults to using Java maps for context&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;executors&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;description&quot;: &quot;The plugins for policy executors used in engines such as javascript, MVEL, Jython&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;description&quot;: &quot;The plugin class path for this policy executor&quot;,&#xd;
                  &quot;type&quot;: &quot;string&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.engineservice.engine.Context&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;distributor&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.Plugin&quot;,&#xd;
               &quot;description&quot;: &quot;The plugin to be used for distributing context between APEX PDPs at runtime&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;schemas&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;description&quot;: &quot;The plugins for context schemas available in APEX PDPs such as Java and Avro&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.native.apex.Plugin&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;locking&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.Plugin&quot;,&#xd;
               &quot;description&quot;: &quot;The plugin to be used for locking context in and between APEX PDPs at runtime&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            },&#xd;
            &quot;persistence&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.apex.Plugin&quot;,&#xd;
               &quot;description&quot;: &quot;The plugin to be used for persisting context for APEX PDPs at runtime&quot;,&#xd;
               &quot;required&quot;: false&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.apex.Plugin&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The name of the executor such as Javascript, Jython or MVEL&quot;,&#xd;
               &quot;required&quot;: true&#xd;
            },&#xd;
            &quot;plugin_class_name&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;description&quot;: &quot;The class path of the plugin class for this executor&quot;&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Native Drools" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.Native&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
         &quot;description&quot;: &quot;a base policy type for all native PDP policies&quot;,&#xd;
         &quot;version&quot;: &quot;1.0.0&quot;&#xd;
      },&#xd;
      &quot;onap.policies.native.Drools&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.Native&quot;,&#xd;
         &quot;description&quot;: &quot;a base policy type for all native PDP policies&quot;,&#xd;
         &quot;version&quot;: &quot;1.0.0&quot;&#xd;
      },&#xd;
      &quot;onap.policies.native.drools.Controller&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.native.Drools&quot;,&#xd;
         &quot;description&quot;: &quot;a policy type for a drools controller configuration&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;controllerName&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the drools controller name&quot;&#xd;
            },&#xd;
            &quot;sourceTopics&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;source topics and applicable events&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.dmaap.topic&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;sinkTopics&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;sink topics and applicable events&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.dmaap.topic&quot;&#xd;
               }&#xd;
            },&#xd;
            &quot;customConfig&quot;: {&#xd;
               &quot;type&quot;: &quot;map&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;any use case specific configurations relevant to the drools controller&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;string&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.policies.native.drools.Artifact&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.native.Drools&quot;,&#xd;
         &quot;description&quot;: &quot;a policy type for native drools artifact policies&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;rulesArtifact&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.native.rules_artifact&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the GAV information of the maven artifact&quot;&#xd;
            },&#xd;
            &quot;controller&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.drools.controller.relation&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the drools controller to which the current native policy is assigned&quot;&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   },&#xd;
   &quot;data_types&quot;: {&#xd;
      &quot;onap.datatypes.dmaap.topic&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;topicName&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the dmaap topic name&quot;&#xd;
            },&#xd;
            &quot;events&quot;: {&#xd;
               &quot;type&quot;: &quot;list&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;events used by this topic&quot;,&#xd;
               &quot;entry_schema&quot;: {&#xd;
                  &quot;type&quot;: &quot;onap.datatypes.dmaap.events&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.dmaap.events&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;eventClass&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the event canonical class for serialization&quot;&#xd;
            },&#xd;
            &quot;eventFilter&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;the JSONPath based condition to filter out the events to serialize&quot;&#xd;
            },&#xd;
            &quot;customSerialization&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.datatypes.dmaap.custom_serialization&quot;,&#xd;
               &quot;required&quot;: false,&#xd;
               &quot;description&quot;: &quot;overrides the default serialization/deserialization mechanisms with custom ones&quot;&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.dmaap.custom_serialization&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;customSerializerClass&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the class that contains the JSON parser serializer/deserializer.&quot;&#xd;
            },&#xd;
            &quot;jsonParser&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;static field in customSerialized class with the json parser (currently only gson supported)&quot;&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.native.rules_artifact&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;groupId&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the groupId of the maven artifact&quot;&#xd;
            },&#xd;
            &quot;artifactId&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the artifactId of the maven artifact&quot;&#xd;
            },&#xd;
            &quot;version&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the version of the maven artifact&quot;&#xd;
            }&#xd;
         }&#xd;
      },&#xd;
      &quot;onap.datatypes.drools.controller.relation&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.datatypes.Root&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;controllerName&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;the name of drools controller policy&quot;&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 4;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
    assert res.policy_types.values()[2] instanceof Map;
    assert res.policy_types.values()[3] instanceof Map;        
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Type Native XACML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;policy_types&quot;: {&#xd;
      &quot;onap.policies.Native&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
         &quot;description&quot;: &quot;a base policy type for all native PDP policies&quot;,&#xd;
         &quot;version&quot;: &quot;1.0.0&quot;&#xd;
      },&#xd;
      &quot;onap.policies.native.Xacml&quot;: {&#xd;
         &quot;derived_from&quot;: &quot;onap.policies.Native&quot;,&#xd;
         &quot;description&quot;: &quot;a policy type for native xacml policies&quot;,&#xd;
         &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
         &quot;properties&quot;: {&#xd;
            &quot;policy&quot;: {&#xd;
               &quot;type&quot;: &quot;string&quot;,&#xd;
               &quot;required&quot;: true,&#xd;
               &quot;description&quot;: &quot;The XML XACML 3.0 PolicySet or Policy&quot;,&#xd;
               &quot;metadata&quot;: {&#xd;
                  &quot;encoding&quot;: &quot;Base64&quot;&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;
    assert res.policy_types.values()[0] instanceof Map;
    assert res.policy_types.values()[1] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Policy Types" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 33;

    def n = 33;
    for (i=0; i&lt;n; i++) {
        assert res.policy_types.values()[i] instanceof Map;	
    }
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Versions of TCA Policy Type" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This is not working in Frankfurt and hence disabled.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() &gt; 0 &amp;&amp; res.policy_types.size() &lt; 10;

    for (i=0; i&lt;res.policy_types.size(); i++) {
        assert res.policy_types.values()[i] instanceof Map;	
    }
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Monitoring" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;

    assert res.policy_types.get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Optimization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 3;

    assert res.policy_types.get(&apos;onap.policies.optimization.resource.AffinityPolicy&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.optimization.resource.AffinityPolicy&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Guard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;

    assert res.policy_types.get(&apos;onap.policies.controlloop.guard.common.Blacklist&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.controlloop.guard.common.Blacklist&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Native APEX" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Apex/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;

    assert res.policy_types.get(&apos;onap.policies.native.Apex&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.Apex&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Native Drools" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Controller/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 3;

    assert res.policy_types.get(&apos;onap.policies.native.drools.Controller&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.drools.Controller&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Type Native XACML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Xacml/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 2;

    assert res.policy_types.get(&apos;onap.policies.native.Xacml&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.Xacml&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Latest Monitoring Policy Type" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/latest</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() &gt; 0 &amp;&amp; res.policy_types.size() &lt; 10;

    assert res.policy_types.get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;) instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;).version ==~ /7.0.\d+/;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Monitoring" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;onap.restart.tca&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.monitoring.cdap.tca.hi.lo.app&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;onap.restart.tca&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;tca_policy&quot;: {&#xd;
                            &quot;domain&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                            &quot;metricsPerEventName&quot;: [&#xd;
                                {&#xd;
                                    &quot;eventName&quot;: &quot;Measurement_vGMUX&quot;,&#xd;
                                    &quot;controlLoopSchemaType&quot;: &quot;VNF&quot;,&#xd;
                                    &quot;policyScope&quot;: &quot;DCAE&quot;,&#xd;
                                    &quot;policyName&quot;: &quot;DCAE.Config_tca-hi-lo&quot;,&#xd;
                                    &quot;policyVersion&quot;: &quot;v0.0.1&quot;,&#xd;
                                    &quot;thresholds&quot;: [&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;EQUAL&quot;,&#xd;
                                            &quot;severity&quot;: &quot;MAJOR&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ABATED&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;GREATER&quot;,&#xd;
                                            &quot;severity&quot;: &quot;CRITICAL&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Monitoring V2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;onap.restart.tca&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.monitoring.cdap.tca.hi.lo.app&quot;,&#xd;
                    &quot;type_version&quot;: &quot;7.0.${__threadNum}&quot;,&#xd;
                    &quot;version&quot;: &quot;7.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;onap.restart.tca&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;tca_policy&quot;: {&#xd;
                            &quot;domain&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                            &quot;metricsPerEventName&quot;: [&#xd;
                                {&#xd;
                                    &quot;eventName&quot;: &quot;Measurement_vGMUX&quot;,&#xd;
                                    &quot;controlLoopSchemaType&quot;: &quot;VNF&quot;,&#xd;
                                    &quot;policyScope&quot;: &quot;DCAE&quot;,&#xd;
                                    &quot;policyName&quot;: &quot;DCAE.Config_tca-hi-lo&quot;,&#xd;
                                    &quot;policyVersion&quot;: &quot;v0.0.1&quot;,&#xd;
                                    &quot;thresholds&quot;: [&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;EQUAL&quot;,&#xd;
                                            &quot;severity&quot;: &quot;MAJOR&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ABATED&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;GREATER&quot;,&#xd;
                                            &quot;severity&quot;: &quot;CRITICAL&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Optimization" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Affinity_Default&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.AffinityPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Affinity_Default&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [],&#xd;
                        &quot;resources&quot;: [],&#xd;
                        &quot;geography&quot;: [],&#xd;
                        &quot;identity&quot;: &quot;affinity_vCPE&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;affinityProperties&quot;: {&#xd;
                            &quot;qualifier&quot;: &quot;same&quot;,&#xd;
                            &quot;category&quot;: &quot;complex&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/2.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Guard" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
   &quot;topology_template&quot;: {&#xd;
      &quot;policies&quot;: [&#xd;
         {&#xd;
            &quot;guard.blacklist.scaleout&quot;: {&#xd;
               &quot;type&quot;: &quot;onap.policies.controlloop.guard.common.Blacklist&quot;,&#xd;
               &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
               &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
               &quot;metadata&quot;: {&#xd;
                  &quot;policy-id&quot;: &quot;guard.blacklist.scaleout&quot;&#xd;
               },&#xd;
               &quot;properties&quot;: {&#xd;
                  &quot;actor&quot;: &quot;SO&quot;,&#xd;
                  &quot;operation&quot;: &quot;VF Module Create&quot;,&#xd;
                  &quot;id&quot;: &quot;ControlLoop-vDNS-6f37f56d-a87d-4b85-b6a9-cc953cf779b3&quot;,&#xd;
                  &quot;blacklist&quot;: [&#xd;
                     &quot;the-vfmodule-where-root-is-true&quot;,&#xd;
                     &quot;another-vfmodule-where-root-is-true&quot;&#xd;
                  ]&#xd;
               }&#xd;
            }&#xd;
         }&#xd;
      ]&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Native APEX" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
  &quot;topology_template&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
      {&#xd;
        &quot;operational.apex.vCPE&quot;: {&#xd;
          &quot;type&quot;: &quot;onap.policies.native.Apex&quot;,&#xd;
          &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
          &quot;derived_from&quot;: &quot;tosca.policies.Root&quot;,&#xd;
          &quot;name&quot;: &quot;operational.apex.vCPE&quot;,&#xd;
          &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;engineServiceParameters&quot;: {&#xd;
              &quot;name&quot;: &quot;MyApexEngine&quot;,&#xd;
              &quot;version&quot;: &quot;0.0.1&quot;,&#xd;
              &quot;id&quot;: 45,&#xd;
              &quot;instanceCount&quot;: 4,&#xd;
              &quot;deploymentPort&quot;: 12561,&#xd;
              &quot;policy_type_impl&quot;: {&#xd;
              },&#xd;
              &quot;engineParameters&quot;: {&#xd;
                &quot;executorParameters&quot;: {&#xd;
                  &quot;JAVASCRIPT&quot;: {&#xd;
                    &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.executor.javascript.JavascriptExecutorParameters&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;contextParameters&quot;: {&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.context.parameters.ContextParameters&quot;,&#xd;
                  &quot;schemaParameters&quot;: {&#xd;
                    &quot;Avro&quot;: {&#xd;
                      &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.context.schema.avro.AvroSchemaHelperParameters&quot;&#xd;
                    },&#xd;
                    &quot;Java&quot;: {&#xd;
                      &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.context.impl.schema.java.JavaSchemaHelperParameters&quot;,&#xd;
                      &quot;jsonAdapters&quot;: {&#xd;
                        &quot;Instant&quot;: {&#xd;
                          &quot;adaptedClass&quot;: &quot;java.time.Instant&quot;,&#xd;
                          &quot;adaptorClass&quot;: &quot;org.onap.policy.controlloop.util.Serialization$GsonInstantAdapter&quot;&#xd;
                        }&#xd;
                      }&#xd;
                    }&#xd;
                  }&#xd;
                },&#xd;
                &quot;taskParameters&quot;: [&#xd;
                  {&#xd;
                    &quot;key&quot;: &quot;ParameterKey1&quot;,&#xd;
                    &quot;value&quot;: &quot;ParameterValue1&quot;&#xd;
                  },&#xd;
                  {&#xd;
                    &quot;taskId&quot;: &quot;AAILookupTask:0.0.1&quot;,&#xd;
                    &quot;key&quot;: &quot;SomeKeyForThisTask&quot;,&#xd;
                    &quot;value&quot;: &quot;Value&quot;&#xd;
                  }&#xd;
                ]&#xd;
              }&#xd;
            },&#xd;
            &quot;eventInputParameters&quot;: {&#xd;
              &quot;GuardRequestorConsumer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTREQUESTOR&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restrequestor.RestRequestorCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://111.222.333.444:5555/pdp/api/getDecision&quot;,&#xd;
                    &quot;httpMethod&quot;: &quot;POST&quot;,&#xd;
                    &quot;restRequestTimeout&quot;: 2000,&#xd;
                    &quot;httpHeader&quot;: &quot;Authorization:aaaaaaaaa== ClientAuth:bbbbbbbbb=&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                },&#xd;
                &quot;eventName&quot;: &quot;GuardResponseEvent&quot;,&#xd;
                &quot;eventNameFilter&quot;: &quot;GuardResponseEvent&quot;,&#xd;
                &quot;requestorMode&quot;: true,&#xd;
                &quot;requestorPeer&quot;: &quot;GuardRequestorProducer&quot;,&#xd;
                &quot;requestorTimeout&quot;: 500&#xd;
              },&#xd;
              &quot;DCAEConsumer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://message-router:3904/events/unauthenticated.DCAE_CL_OUTPUT/APEX/1?timeout=60000&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;nameAlias&quot;: &quot;closedLoopControlName&quot;,&#xd;
                    &quot;versionAlias&quot;: &quot;version&quot;,&#xd;
                    &quot;sourceAlias&quot;: &quot;from&quot;,&#xd;
                    &quot;pojoField&quot;: &quot;VirtualControlLoopEvent&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;&#xd;
              },&#xd;
              &quot;APPCConsumer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://message-router:3904/events/APPC-LCM-WRITE/APEX/1?timeout=60000&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;versionAlias&quot;: &quot;version&quot;,&#xd;
                    &quot;pojoField&quot;: &quot;APPCLCMResponseEvent&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventName&quot;: &quot;APPCRestartVNFResponseEvent&quot;,&#xd;
                &quot;eventNameFilter&quot;: &quot;APPCRestartVNFResponseEvent&quot;&#xd;
              }&#xd;
            },&#xd;
            &quot;eventOutputParameters&quot;: {&#xd;
              &quot;logProducer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;FILE&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;fileName&quot;: &quot;/tmp/VCPEEventsOut.json&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                }&#xd;
              },&#xd;
              &quot;GuardRequestorProducer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTREQUESTOR&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restrequestor.RestRequestorCarrierTechnologyParameters&quot;&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;&#xd;
                },&#xd;
                &quot;eventNameFilter&quot;: &quot;GuardRequestEvent&quot;,&#xd;
                &quot;requestorMode&quot;: true,&#xd;
                &quot;requestorPeer&quot;: &quot;GuardRequestorConsumer&quot;,&#xd;
                &quot;requestorTimeout&quot;: 500&#xd;
              },&#xd;
              &quot;APPCProducer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://message-router:3904/events/APPC-LCM-READ&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;versionAlias&quot;: &quot;version&quot;,&#xd;
                    &quot;sourceAlias&quot;: &quot;from&quot;,&#xd;
                    &quot;pojoField&quot;: &quot;APPCLCMRequestEvent&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventNameFilter&quot;: &quot;APPCRestartVNFRequestEvent&quot;&#xd;
              },&#xd;
              &quot;PolicyLogProducer&quot;: {&#xd;
                &quot;carrierTechnologyParameters&quot;: {&#xd;
                  &quot;carrierTechnology&quot;: &quot;RESTCLIENT&quot;,&#xd;
                  &quot;parameterClassName&quot;: &quot;org.onap.policy.apex.plugins.event.carrier.restclient.RestClientCarrierTechnologyParameters&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;url&quot;: &quot;http://message-router:3904/events/POLICY-CL-MGT&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventProtocolParameters&quot;: {&#xd;
                  &quot;eventProtocol&quot;: &quot;JSON&quot;,&#xd;
                  &quot;parameters&quot;: {&#xd;
                    &quot;versionAlias&quot;: &quot;version&quot;,&#xd;
                    &quot;sourceAlias&quot;: &quot;from&quot;,&#xd;
                    &quot;pojoField&quot;: &quot;VirtualControlLoopNotification&quot;&#xd;
                  }&#xd;
                },&#xd;
                &quot;eventNameFilter&quot;: &quot;ControlLoopLogEvent&quot;&#xd;
              }&#xd;
            }&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Native Drools" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;usecases.artifacts&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.native.drools.Artifact&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;name&quot;: &quot;usecases.artifacts&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;usecases.artifacts&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;rulesArtifact&quot;: {&#xd;
                            &quot;groupId&quot;: &quot;org.onap.policy.drools-applications.controlloop.common&quot;,&#xd;
                            &quot;artifactId&quot;: &quot;controller-usecases&quot;,&#xd;
                            &quot;version&quot;: &quot;1.6.1&quot;&#xd;
                        },&#xd;
                        &quot;controller&quot;: {&#xd;
                            &quot;name&quot;: &quot;frankfurt&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Policy Native XACML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;onap.policies.native.xacml.NativeXacmlPolicy&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.native.Xacml&quot;,&#xd;
                    &quot;type_version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;version&quot;: &quot;6.0.${__threadNum}&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;onap.policies.native.xacml.NativeXacmlPolicy&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;tca_policy&quot;: {&#xd;
                            &quot;domain&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                            &quot;metricsPerEventName&quot;: [&#xd;
                                {&#xd;
                                    &quot;eventName&quot;: &quot;Measurement_vGMUX&quot;,&#xd;
                                    &quot;controlLoopSchemaType&quot;: &quot;VNF&quot;,&#xd;
                                    &quot;policyScope&quot;: &quot;DCAE&quot;,&#xd;
                                    &quot;policyName&quot;: &quot;DCAE.Config_tca-hi-lo&quot;,&#xd;
                                    &quot;policyVersion&quot;: &quot;v0.0.1&quot;,&#xd;
                                    &quot;thresholds&quot;: [&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;EQUAL&quot;,&#xd;
                                            &quot;severity&quot;: &quot;MAJOR&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ABATED&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;GREATER&quot;,&#xd;
                                            &quot;severity&quot;: &quot;CRITICAL&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/2.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All TCA Policies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size &gt; 0 &amp;&amp; res.topology_template.policies.size &lt; 10;


    for (i=0; i&lt;res.topology_template.policies.size; i++) {
        assert res.topology_template.policies[i] instanceof Map;
    }
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Versions of Monitoring Policy" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size &gt; 0 &amp;&amp; res.topology_template.policies.size &lt; 6;

    for (i=0; i&lt;res.topology_template.policies.size; i++) {
        assert res.topology_template.policies[i] instanceof Map;
        assert res.topology_template.policies[i].get(&apos;onap.restart.tca&apos;).version == &quot;6.0.${__threadNum}&quot;;
    }
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Monitoring" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies/onap.restart.tca/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;onap.restart.tca&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Optimization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/6.0.${__threadNum}/policies/OSDF_CASABLANCA.Affinity_Default/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;OSDF_CASABLANCA.Affinity_Default&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Guard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/6.0.${__threadNum}/policies/guard.blacklist.scaleout/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;guard.blacklist.scaleout&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Native APEX" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Apex/versions/6.0.${__threadNum}/policies/operational.apex.vCPE/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;operational.apex.vCPE&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Native Drools" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Artifact/versions/6.0.${__threadNum}/policies/usecases.artifacts/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;usecases.artifacts&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Policy Native XACML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Xacml/versions/6.0.${__threadNum}/policies/onap.policies.native.xacml.NativeXacmlPolicy/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;onap.policies.native.xacml.NativeXacmlPolicy&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get latest Monitoring Policy" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies/onap.restart.tca/versions/latest</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;

    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies [0].get(&apos;onap.restart.tca&apos;).version ==~ /6.0.\d+/;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Monitoring" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies/onap.restart.tca/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;onap.restart.tca&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Monitoring V2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}/policies/onap.restart.tca/versions/7.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;onap.restart.tca&apos;).version == &quot;7.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Optimization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/6.0.${__threadNum}/policies/OSDF_CASABLANCA.Affinity_Default/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;OSDF_CASABLANCA.Affinity_Default&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Guard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/6.0.${__threadNum}/policies/guard.blacklist.scaleout/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;guard.blacklist.scaleout&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Native APEX" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Apex/versions/6.0.${__threadNum}/policies/operational.apex.vCPE/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;operational.apex.vCPE&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Native Drools" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Artifact/versions/6.0.${__threadNum}/policies/usecases.artifacts/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;usecases.artifacts&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Native XACML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Xacml/versions/6.0.${__threadNum}/policies/onap.policies.native.xacml.NativeXacmlPolicy/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.topology_template.policies instanceof List;
    assert res.topology_template.policies.size == 1;
    assert res.topology_template.policies[0] instanceof Map;
    assert res.topology_template.policies[0].get(&apos;onap.policies.native.xacml.NativeXacmlPolicy&apos;).version == &quot;6.0.${__threadNum}&quot;;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Monitoring" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;409&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof List;
    assert res.policy_types.size == 1;
    assert res.policy_types[0] instanceof Map;
    assert res.policy_types[0].get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Monitoring V2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.monitoring.cdap.tca.hi.lo.app/versions/7.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;409&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof List;
    assert res.policy_types.size == 1;
    assert res.policy_types[0] instanceof Map;
    assert res.policy_types[0].get(&apos;onap.policies.monitoring.cdap.tca.hi.lo.app&apos;).version == &quot;7.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Optimization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;409&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof List;
    assert res.policy_types.size == 1;
    assert res.policy_types[0] instanceof Map;
    assert res.policy_types[0].get(&apos;onap.policies.optimization.resource.AffinityPolicy&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Guard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.controlloop.guard.common.Blacklist/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.controlloop.guard.common.Blacklist&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Native APEX" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Apex/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.Apex&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Native Drools Controller" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Controller/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.drools.Controller&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Native Drools Artifact" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.drools.Artifact/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.drools.Artifact&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Policy Type Native XACML" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes/onap.policies.native.Xacml/versions/6.0.${__threadNum}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.get(&apos;onap.policies.native.Xacml&apos;).version == &quot;6.0.${__threadNum}&quot;;
 }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Healthcheck" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/healthcheck</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.code == 200;
    assert res.name == &quot;Policy API&quot;;
    assert res.healthy==true;
    assert res.message==&quot;alive&quot;;
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Preloaded Policy Types" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/policy/api/v1/policytypes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.policy_types instanceof Map;
    assert res.policy_types.size() == 27;
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/home/liam/work/WIndriver/summary.log</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/home/ubuntu/s3p/stability.log</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/home/liam/work/WIndriver/Results.log</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
