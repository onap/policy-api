{
  "comments": [
    {
      "key": {
        "uuid": "e0c2c91e_729d2b54",
        "filename": "main/pom.xml",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-20T14:01:43Z",
      "side": 1,
      "message": "change to mockito-all and remove the version",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9817709b_27b6dc13",
        "filename": "main/pom.xml",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 7010
      },
      "writtenOn": "2020-11-24T08:40:09Z",
      "side": 1,
      "message": "\u003e change to mockito-all and remove the version\n\nmockito-all has not been updated since 2014 and pulls in old dependencies - e.g. hamcrest\nThis causes \"TestStatisticsReport.testStatisticsReport:45 Â» NoSuchMethod \u0027org.hamcrest.core...\"\nI can fix it by manually specifying hamcrest-core 1.3 in pom but can we not just use mockito-core?",
      "parentUuid": "e0c2c91e_729d2b54",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83f6fb13_3d3e662c",
        "filename": "main/pom.xml",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-24T19:51:45Z",
      "side": 1,
      "message": "would prefer to use mockito-all or powermock (which is also in policy/parent and includes mockito as a dependency) rather than introducing another dependency.  We can look at upgrading mockito version in \"I\" release.\n\nthese are preferred over hamcrest:\norg.assertj.core.api.Assertions\norg.mockito.ArgumentMatchers",
      "parentUuid": "9817709b_27b6dc13",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63a1fefd_89acedc5",
        "filename": "main/src/main/java/org/onap/policy/api/main/startstop/ApiDatabaseInitializer.java",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 57
      },
      "writtenOn": "2020-11-20T13:30:35Z",
      "side": 1,
      "message": "These types of values should be configurable via config file.",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 63
      },
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "615964c6_0d3f35e4",
        "filename": "main/src/main/java/org/onap/policy/api/main/startstop/ApiDatabaseInitializer.java",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 7010
      },
      "writtenOn": "2020-11-23T17:33:57Z",
      "side": 1,
      "message": "\u003e These types of values should be configurable via config file.\n\nTrue, but where to put it? Is DatabaseProviderParameters appropriate?",
      "parentUuid": "63a1fefd_89acedc5",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 63
      },
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb451bb6_46a99930",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-20T14:01:43Z",
      "side": 1,
      "message": "This should be common code probably placed in policy/models.  However, that can wait until this has been merged.  OTOH, maybe we should just add a createWithRetry() method to the PolicyModelsProviderFactory. If we do that, then we can also add any extra config parameters (e.g., retry time) to PolicyModelsProviderParameters.",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f63a537a_80f0226e",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7010
      },
      "writtenOn": "2020-11-24T12:07:05Z",
      "side": 1,
      "message": "Agreed we should look at modifying policy/models. Do we merge this (when ready) first?",
      "parentUuid": "eb451bb6_46a99930",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c609982_7c65fc06",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-24T19:51:45Z",
      "side": 1,
      "message": "Depends.  Seems like this could be done as part of addressing Liam\u0027s comment about restructuring.  Up to him whether we should do it now or in a subsequent review.  Either way, it should be done before moving on to PAP.",
      "parentUuid": "f63a537a_80f0226e",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15f2987e_62805258",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-20T14:01:43Z",
      "side": 1,
      "message": "just 2020\n\nsame comment on the next line",
      "range": {
        "startLine": 5,
        "startChar": 17,
        "endLine": 5,
        "endChar": 26
      },
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aa6a86f_d44d9ac6",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 7010
      },
      "writtenOn": "2020-11-24T12:07:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15f2987e_62805258",
      "range": {
        "startLine": 5,
        "startChar": 17,
        "endLine": 5,
        "endChar": 26
      },
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4735bdf_0cf92a46",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-20T14:01:43Z",
      "side": 1,
      "message": "sorry, now I\u0027m remembering some details that I should have put in the JIRA: should only retry if it\u0027s a \"temporary\" issue, such as connectivity.  If it\u0027s a configuration issue (e.g., invalid host name, credentials), then it should not retry.  Not sure if there\u0027s a generic way to check for that; may have to include a list of retry-able connection codes in the config so they can be adjusted for the DBMS chosen by the organization.",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc5a5626_84e7c7fd",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 7010
      },
      "writtenOn": "2020-11-24T08:40:09Z",
      "side": 1,
      "message": "\u003e sorry, now I\u0027m remembering some details that I should have put in the JIRA: should only retry if it\u0027s a \"temporary\" issue, such as connectivity.  If it\u0027s a configuration issue (e.g., invalid host name, credentials), then it should not retry.  Not sure if there\u0027s a generic way to check for that; may have to include a list of retry-able connection codes in the config so they can be adjusted for the DBMS chosen by the organization.\n\nThis is problematic. There are no named exceptions thrown for connection failure by JPA. e.g. H2 and MariaDB use different exceptions. We can search for e.g. \u0027Connection refused\u0027 in getMessage() - which will work for H2 and MariaDB, but is fragile. As you suggest we can include search strings in config/params...",
      "parentUuid": "e4735bdf_0cf92a46",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fafab47_6fdf7be2",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-24T19:51:45Z",
      "side": 1,
      "message": "seems like JPA still provides access to the underlying exception.  Yeah, may need to check messages instead of codes, if the code is not readily accessible in a generic way - there may be a SQLException in the stacktrace that can be examined.",
      "parentUuid": "fc5a5626_84e7c7fd",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "422f224b_b81147ed",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-20T14:01:43Z",
      "side": 1,
      "message": "for junit tests, we need a way to shorten this sleep to just a couple of milliseconds.  Some alternatives:\n- make the retry period milliseconds instead of seconds\n- wrap the Thread.sleep() call in a method and then override the method in the junit tests\n- use CurrentTime object (from policy/common utils) to do sleep and override the object, in the junit tests, with a subclass of CurrentTime that simply returns when sleep is called",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "160235e5_ac45ee0d",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 7010
      },
      "writtenOn": "2020-11-24T08:40:09Z",
      "side": 1,
      "message": "\u003e for junit tests, we need a way to shorten this sleep to just a couple of milliseconds.  Some alternatives:\n\u003e - make the retry period milliseconds instead of seconds\n\u003e - wrap the Thread.sleep() call in a method and then override the method in the junit tests\n\u003e - use CurrentTime object (from policy/common utils) to do sleep and override the object, in the junit tests, with a subclass of CurrentTime that simply returns when sleep is called\n\nWe can (manually) inject a mock CurrentTime object into the Retriever which will return immediately or throw InterruptedException",
      "parentUuid": "422f224b_b81147ed",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28820c5d_dd5a319e",
        "filename": "main/src/main/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetriever.java",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-24T19:51:45Z",
      "side": 1,
      "message": "that works",
      "parentUuid": "160235e5_ac45ee0d",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69573454_b83d5520",
        "filename": "main/src/test/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetrieverTest.java",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-20T14:01:43Z",
      "side": 1,
      "message": "just 2020\n\nsame comment below",
      "range": {
        "startLine": 5,
        "startChar": 17,
        "endLine": 5,
        "endChar": 26
      },
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a3a0f79_6f7ee9c4",
        "filename": "main/src/test/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetrieverTest.java",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 7010
      },
      "writtenOn": "2020-11-24T12:07:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69573454_b83d5520",
      "range": {
        "startLine": 5,
        "startChar": 17,
        "endLine": 5,
        "endChar": 26
      },
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "104480bf_735ff6d7",
        "filename": "main/src/test/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetrieverTest.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-11-20T14:01:43Z",
      "side": 1,
      "message": "also need to test the rainy day scenario where interrupt is thrown while sleeping",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09bdb85b_26798709",
        "filename": "main/src/test/java/org/onap/policy/api/main/utils/PolicyModelsProviderRetrieverTest.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 7010
      },
      "writtenOn": "2020-11-24T08:40:09Z",
      "side": 1,
      "message": "\u003e also need to test the rainy day scenario where interrupt is thrown while sleeping\n\nBy injecting a CurrentTime object we can test InterruptedException",
      "parentUuid": "104480bf_735ff6d7",
      "revId": "b1e5eb85ea8ec83d74b63e6e7612c084889dc89e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}